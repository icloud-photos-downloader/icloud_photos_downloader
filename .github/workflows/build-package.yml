
name: Build and Package

on:
  workflow_call:
    inputs:
      icloudpd_version:
        required: true
        type: string

jobs:

  build_src:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v4

    - name: Download version info
      uses: actions/download-artifact@v4
      with:
        name: icloudpd-version-info
        path: |
          src/foundation

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install Dev dependencies
      run: >
        python3 -m pip install --disable-pip-version-check -r requirements-pip.txt &&
        pip3 install --disable-pip-version-check -e . --group dev

    - name: Build Python Wheel
      run: |
        scripts/build

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: icloudpd-src
        if-no-files-found: error
        path: |
          dist/icloudpd*.whl

  get_version_thumbprint:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v4

    - name: Download version info
      uses: actions/download-artifact@v4
      with:
        name: icloudpd-version-info
        path: |
          src/foundation

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install
      run: >
        export DEBIAN_FRONTEND=noninteractive && sudo apt-get update && sudo apt-get install -y tzdata locales-all &&
        python3 -m pip install --disable-pip-version-check -r requirements-pip.txt &&
        pip3 install --disable-pip-version-check -e .

    - name: Get Version
      id: get_version
      run: >
        mkdir -p dist &&
        icloudpd --version | tee dist/icloudpd-version-thumbprint.txt
          
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: icloudpd-version-thumbprint
        if-no-files-found: error
        path: |
          dist/icloudpd-version-thumbprint.txt
          
  get_expected_version_linux_apt:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v4

    - name: Download version info
      uses: actions/download-artifact@v4
      with:
        name: icloudpd-version-info
        path: |
          src/foundation

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install Dev dependencies
      run: >
        export DEBIAN_FRONTEND=noninteractive && sudo apt-get update && sudo apt-get install -y tzdata locales-all &&
        python3 -m pip install --disable-pip-version-check -r requirements-pip.txt &&
        pip3 install --disable-pip-version-check -e .

    - name: Get Version
      id: get_version
      run: |
        echo expected_version=$(TZ=America/Los_Angeles LC_ALL=ru_RU.UTF-8 icloudpd --use-os-locale --version) >> $GITHUB_OUTPUT
          
    - name: Log version
      run: |
        echo "expected_version=${{steps.get_version.outputs.expected_version}}"

    outputs:
      expected_version: ${{steps.get_version.outputs.expected_version}}

  get_expected_version_linux_apk:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v4

    - name: Download version info
      uses: actions/download-artifact@v4
      with:
        name: icloudpd-version-info
        path: |
          src/foundation

    - name: Run version
      uses: addnab/docker-run-action@v3
      with:
        image: python:3.13-alpine3.19
        shell: sh
        options: -v ${{ github.workspace }}:/work 
        run: >
          export MUSL_LOCPATH="/usr/share/i18n/locales/musl" &&
          apk add --update tzdata musl-locales musl-locales-lang &&
          cd /work &&
          python3 -m pip install --disable-pip-version-check -r requirements-pip.txt &&
          pip3 install . &&
          TZ=America/Los_Angeles LC_ALL=ru_RU.UTF-8 icloudpd --use-os-locale --version 1>.result

    - name: Get Version
      id: get_version
      run: |
        echo expected_version=$(cat .result) >> $GITHUB_OUTPUT
          
    - name: Log version
      run: |
        echo "expected_version=${{steps.get_version.outputs.expected_version}}"

    outputs:
      expected_version: ${{steps.get_version.outputs.expected_version}}


  get_expected_version_macos:
    runs-on: macos-14
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v4

    - name: Download version info
      uses: actions/download-artifact@v4
      with:
        name: icloudpd-version-info
        path: |
          src/foundation

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install Dev dependencies
      run: |
        pip3 install --disable-pip-version-check -e .

    - name: Get Version
      id: get_version
      run: |
        echo expected_version=$(TZ=America/Los_Angeles LC_ALL=ru_RU.UTF-8 icloudpd --use-os-locale --version) >> $GITHUB_OUTPUT
          
    - name: Log version
      run: |
        echo "expected_version=${{steps.get_version.outputs.expected_version}}"

    outputs:
      expected_version: ${{steps.get_version.outputs.expected_version}}
  
  build_linux_apt:
    # 24.02 gives futex error during apt: https://github.com/actions/runner-images/issues/9977
    runs-on: ubuntu-22.04
    name: Build Linux ${{ matrix.platform[1] }} Debian
    strategy:
      fail-fast: false
      matrix:
        platform:
          - [
            "linux/amd64",
            "amd64",
          ]
          - [
            "linux/arm64",
            "arm64",
          ]
          - [
            "linux/arm/v7",
            "arm32v7",
          ]
    steps:
    - uses: actions/checkout@v4

    - name: Download version info
      uses: actions/download-artifact@v4
      with:
        name: icloudpd-version-info
        path: |
          src/foundation

    - name: Set up QEMU
      if: matrix.platform[1] != 'amd64'
      uses: docker/setup-qemu-action@v3

    - uses: docker/setup-buildx-action@v3
      id: setup

    - name: Cache Build
      uses: actions/cache@v4
      id: cache
      with:
        # if the list or anything in these folders expected to change, then cache needs to be cleared and rebuilt, because it is keyed only by pyproject.toml hash
        path: .cache
        key: build-${{ matrix.platform[1] }}-${{ hashFiles('pyproject.toml','Dockerfile.build') }}
        restore-keys: |
          build-${{ matrix.platform[1] }}-
      
    - name: Create folders on cache miss
      run: |
        mkdir -p .cache/var/cache/apt
        mkdir -p .cache/var/lib/apt
        mkdir -p .cache/root/.cache/pip
        mkdir -p .cache/root/.distrib/rust
        mkdir -p .cache/root/.cargo/registry
      
    - name: Inject docker cache
      uses: reproducible-containers/buildkit-cache-dance@v3.1.2
      with:
        cache-map: |
          {
            ".cache/var/cache/apt": "/var/cache/apt",
            ".cache/var/lib/apt": "/var/lib/apt",
            ".cache/root/.cache/pip": "/root/.cache/pip",
            ".cache/root/.cargo/registry": "/root/.cargo/registry",
            ".cache/root/.distrib/rust": "/root/.distrib/rust"
          }

    - name: Build
      uses: docker/build-push-action@v6
      with:
        push: false
        platforms: ${{ matrix.platform[0] }}
        # do not cache layers
        file: Dockerfile.build
        outputs: type=local,dest=dist
        provenance: false
        context: .

    - name: Reorg contents
      continue-on-error: true
      run: |
        mv dist/icloud dist/icloud-${{inputs.icloudpd_version}}-linux-${{ matrix.platform[1] }}
        mv dist/icloudpd dist/icloudpd-${{inputs.icloudpd_version}}-linux-${{ matrix.platform[1] }}
        mv dist/icloudpd_ex dist/icloudpd-ex-${{inputs.icloudpd_version}}-linux-${{ matrix.platform[1] }}
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: icloudpd-bin-linux-${{ matrix.platform[1] }}-apt
        if-no-files-found: error
        path: |
          dist/icloud*
  
  clone_src_whl:
    runs-on: ubuntu-22.04
    needs:
      - build_src
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v4

    - name: Download src
      uses: actions/download-artifact@v4
      with:
        name: icloudpd-src
        path: |
          dist

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install Dev dependencies
      run: >
        python3 -m pip install --disable-pip-version-check -r requirements-pip.txt &&
        pip3 install --disable-pip-version-check --group dev

    - name: Build Dummy Python Wheel
      run: |
        scripts/clone_whl_version ${{inputs.icloudpd_version}} 0.0.1234567890

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: icloudpd-dummywhl-src
        if-no-files-found: error
        path: |
          dist/icloudpd-0.0.1234567890-*.whl

  clone_linux_whl:
    runs-on: ubuntu-22.04
    needs:
      - build_linux_apt
      - build_linux_apk
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v4

    - name: Download bin
      uses: actions/download-artifact@v4
      with:
        pattern: icloudpd-bin-linux-*
        merge-multiple: true
        path: |
          dist

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install Dev dependencies
      run: >
        python3 -m pip install --disable-pip-version-check -r requirements-pip.txt &&
        pip3 install --disable-pip-version-check --group dev

    - name: Build Dummy Python Wheel
      run: |
        scripts/clone_whl_version ${{inputs.icloudpd_version}} 0.0.1234567890

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: icloudpd-dummywhl-linux
        if-no-files-found: error
        path: |
          dist/icloudpd-0.0.1234567890-*.whl
        
  clone_macos_whl:
    runs-on: ubuntu-22.04
    needs:
      - build_macos
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v4

    - name: Download bin
      uses: actions/download-artifact@v4
      with:
        pattern: icloudpd-bin-macos-*
        merge-multiple: true
        path: |
          dist

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install Dev dependencies
      run: >
        python3 -m pip install --disable-pip-version-check -r requirements-pip.txt &&
        pip3 install --disable-pip-version-check --group dev

    - name: Build Dummy Python Wheel
      run: |
        scripts/clone_whl_version ${{inputs.icloudpd_version}} 0.0.1234567890

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: icloudpd-dummywhl-macos
        if-no-files-found: error
        path: |
          dist/icloudpd-0.0.1234567890-*.whl
  
  clone_windows_whl:
    runs-on: ubuntu-22.04
    needs:
      - build_windows
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v4

    - name: Download bin
      uses: actions/download-artifact@v4
      with:
        pattern: icloudpd-bin-windows-*
        merge-multiple: true
        path: |
          dist

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install Dev dependencies
      run: >
        python3 -m pip install --disable-pip-version-check -r requirements-pip.txt &&
        pip3 install --disable-pip-version-check --group dev

    - name: Build Dummy Python Wheel
      run: |
        scripts/clone_whl_version ${{inputs.icloudpd_version}} 0.0.1234567890

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: icloudpd-dummywhl-windows
        if-no-files-found: error
        path: |
          dist/icloudpd-0.0.1234567890-*.whl
        
  build_linux_apk:
    # 24.02 gives futex error during apt: https://github.com/actions/runner-images/issues/9977
    runs-on: ubuntu-22.04
    name: Build Linux ${{ matrix.platform[1] }} Alpine
    strategy:
      fail-fast: false
      matrix:
        platform:
          - [
            "linux/amd64",
            "amd64",
          ]
          - [
            "linux/arm64",
            "arm64",
          ]
          - [
            "linux/arm/v7",
            "arm32v7",
          ]
    steps:
    - uses: actions/checkout@v4

    - name: Download version info
      uses: actions/download-artifact@v4
      with:
        name: icloudpd-version-info
        path: |
          src/foundation

    - name: Set up QEMU
      if: matrix.platform[1] != 'amd64'
      uses: docker/setup-qemu-action@v3

    - uses: docker/setup-buildx-action@v3
      id: setup
    
    - name: Cache Folders Build
      uses: actions/cache@v4
      id: cache
      with:
        # if the list or anything in these folders expected to change, then cache needs to be cleared and rebuilt, because it is keyed only by pyproject.toml hash
        path: .cache
        key: build-musl-${{ matrix.platform[1] }}-${{ hashFiles('pyproject.toml','Dockerfile.build-musl') }}
        restore-keys: |
          build-musl-${{ matrix.platform[1] }}-

    - name: Create folders on cache miss
      run: |
        mkdir -p .cache/var/cache/apk
        mkdir -p .cache/root/.cache/pip
      
    - name: Inject docker cache
      uses: reproducible-containers/buildkit-cache-dance@v3.1.2
      with:
        cache-map: |
          {
            ".cache/var/cache/apk": "/var/cache/apk",
            ".cache/root/.cache/pip": "/root/.cache/pip"
          }
              
    - name: Build
      uses: docker/build-push-action@v6
      with:
        push: false
        platforms: ${{ matrix.platform[0] }}
        # do not cache layers
        file: Dockerfile.build-musl
        outputs: type=local,dest=dist
        provenance: false
        context: .

    - name: Reorg contents
      continue-on-error: true
      run: |
        mv dist/icloud dist/icloud-${{inputs.icloudpd_version}}-linux-musl-${{ matrix.platform[1] }}
        mv dist/icloudpd dist/icloudpd-${{inputs.icloudpd_version}}-linux-musl-${{ matrix.platform[1] }}
        mv dist/icloudpd_ex dist/icloudpd-ex-${{inputs.icloudpd_version}}-linux-musl-${{ matrix.platform[1] }}
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: icloudpd-bin-linux-${{ matrix.platform[1] }}-apk
        if-no-files-found: error
        path: |
          dist/icloud*
  
  build_macos:
    # earliest possible mac for better compatibility
    runs-on: macos-13
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v4

    - name: Download version info
      uses: actions/download-artifact@v4
      with:
        name: icloudpd-version-info
        path: |
          src/foundation

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install Dev dependencies
      run: >
        python3 -m pip install --disable-pip-version-check -r requirements-pip.txt &&
        pip3 install --disable-pip-version-check -e . --group dev

    - name: Build Release Executables
      run: |
        scripts/build_bin2 icloudpd icloud  && \
        scripts/build_bin1 icloud && \
        scripts/build_bin1 icloudpd_ex  && \
        mv dist/icloud dist/icloud-${{inputs.icloudpd_version}}-macos-amd64 && \
        mv dist/icloudpd dist/icloudpd-${{inputs.icloudpd_version}}-macos-amd64 && \
        mv dist/icloudpd_ex dist/icloudpd-ex-${{inputs.icloudpd_version}}-macos-amd64

    - name: Build Python Binary Wheel
      run: |
        scripts/build_binary_dist_macos ${{inputs.icloudpd_version}}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: icloudpd-bin-macos-amd64
        if-no-files-found: error
        path: |
          dist/icloud*

  build_windows:
    # earliest possible mac for better compatibility
    runs-on: windows-2019
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v4

    - name: Download version info
      uses: actions/download-artifact@v4
      with:
        name: icloudpd-version-info
        path: |
          src/foundation

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install Dev dependencies
      run: >
        python3 -m pip install --disable-pip-version-check -r requirements-pip.txt &&
        pip3 install --disable-pip-version-check -e . --group dev

    - name: Build Release Executables
      run: |
        scripts/build_bin2 icloudpd icloud  && \
        scripts/build_bin1 icloud && \
        scripts/build_bin1 icloudpd_ex  && \
        mv dist/icloud dist/icloud-${{inputs.icloudpd_version}}-windows-amd64 && \
        mv dist/icloudpd dist/icloudpd-${{inputs.icloudpd_version}}-windows-amd64 && \
        mv dist/icloudpd_ex dist/icloudpd-ex-${{inputs.icloudpd_version}}-windows-amd64

    - name: Build Python Binary Wheel
      run: |
        scripts/build_binary_dist_windows ${{inputs.icloudpd_version}}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: icloudpd-bin-windows-amd64
        if-no-files-found: error
        path: |
          dist/icloud*

  build_docker:
    runs-on: ubuntu-22.04
    needs: 
      # - build_linux_apt
      - build_linux_apk # docker is musl only

    steps:
    - uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with: 
        pattern: icloudpd-bin-linux-*
        merge-multiple: true
        path: | 
          dist 
 
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        version: v0.12.0

    - name: Build Release Docker
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64,linux/arm/v7 #,linux/arm/v5
        push: false
        outputs: type=oci,dest=dist/icloudpd-${{inputs.icloudpd_version}}-oci.tar
        load: false  # load into docker 
        # tags: | 
        #   icloudpd/icloudpd:latest 
        #   icloudpd/icloudpd:${{inputs.icloudpd_version}} 
        #   icloudpd/icloudpd:commit-${{ github.sha }} 
 
    - name: Upload artifacts 
      uses: actions/upload-artifact@v4 
      with: 
        name: icloudpd-oci 
        if-no-files-found: error 
        path: | 
          dist/icloud*.tar

  build_npm:
    runs-on: ubuntu-22.04
    needs: 
      - build_linux_apt
      # - build_linux_apk npm is glibc only
      - build_macos
      - build_windows
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: icloudpd-bin-*
          merge-multiple: true
          path: |
            dist

      - name: Build Package
        run: |
          scripts/build_npm ${{inputs.icloudpd_version}}

      - name: Upload artifacts 
        uses: actions/upload-artifact@v4 
        with: 
          name: icloudpd-npm
          if-no-files-found: error 
          path: | 
            dist/npm/

  compatibility_linux_pip_apt:
    name: "Compat PIP ${{ matrix.image[1] }} ${{ matrix.prop[1] }} apt"
    strategy: 
      fail-fast: false
      matrix:
        image: 
          - [ 
            "python3_13", #variant name
            "python:3.13", #image
            ] 
          # apt-get does not work for debian 6 anymore
          # - [ 
          #   "debian_6_squeeze", #variant name
          #   "debian:squeeze", #image
          #   ] 
          # apt-get does not work for debian 7 anymore
          # - [ 
          #   "debian_7_wheezy", #variant name
          #   "debian:wheezy", #image
          #   ] 
          # apt-get does not work for debian 8 anymore
          # - [ 
          #   "debian_8_jessie", #variant name
          #   "debian:jessie", #image
          #   ] 
          # apt-get does not work for debian 7 anymore
          # - [ 
          #   "debian_9_stretch", #variant name
          #   "debian:stretch", #image
          #   ] 
          - [ 
            "debian_10_buster", #variant name
            "debian:buster", #image
            ] 
          - [ 
            "debian_11_bullseye", #variant name
            "debian:bullseye", #image
            ] 
          - [ 
            "debian_12_bookworm", #variant name
            "debian:bookworm", #image
            ] 
          # apt-get does not work for ubuntu 12 anymore
          # - [ 
          #   "ubuntu_12_precise", #variant name
          #   "ubuntu:precise", #image
          #   ] 
          # apt-get does not work have venv for ubuntu 14 -- TBD
          # - [ 
          #   "ubuntu_14_trusty", #variant name
          #   "ubuntu:trusty", #image
          #   ] 
          - [ 
            "ubuntu_16_xenial", #variant name
            "ubuntu:xenial", #image
            ] 
          - [ 
            "ubuntu_18_bionic", #variant name
            "ubuntu:bionic", #image
            ] 
          - [ 
            "ubuntu_20_focal", #variant name
            "ubuntu:focal", #image
            ] 
          - [ 
            "ubuntu_22_jammy", #variant name
            "ubuntu:jammy", #image
            ] 
          - [ 
            "ubuntu_24_noble", #variant name
            "ubuntu:noble", #image
            ] 
        prop: 
          - [
            "amd64",  # variant name
            "amd64",  # platform spec
            "",  # image prefix
          ]
          - [
            "arm64",  # variant name
            "arm64",  # platform spec
            "",  # image prefix
          ]
          - [
            "arm32v7",  # variant name
            "arm/v7",  # platform spec
            "arm32v7/",  # image prefix
          ]
    runs-on: ubuntu-22.04
    needs:
      - clone_linux_whl
      - clone_src_whl
    defaults:
      run:
        shell: bash

    steps:

      - name: Get image
        id: get_image 
        run: | 
          echo digest=$(docker pull --platform linux/${{ matrix.prop[1] }} ${{ matrix.prop[2] }}${{ matrix.image[1] }} | grep Digest | head -n 1 | cut -d: -f 2-3 | tr -d ' ') >> $GITHUB_OUTPUT
 
      - name: Make folder for compatibility
        if: steps.get_image.outputs.digest != '' 
        run: |
          mkdir compatibility

      - name: Make folder for tzlc
        if: steps.get_image.outputs.digest != '' 
        run: |
          mkdir tzlc
  
      - name: Download artifacts (src)
        if: steps.get_image.outputs.digest != '' 
        uses: actions/download-artifact@v4
        with:
          name: icloudpd-dummywhl-src
          path: |
            dist

      - name: Download artifacts (whl)
        if: steps.get_image.outputs.digest != '' 
        uses: actions/download-artifact@v4
        with:
          name: icloudpd-dummywhl-linux
          path: |
            dist

      # fails with "icloud: Failed to stat /proc/self/exe: Bad file descriptor" in bookwork arm64
      # - name: Set up QEMU
      #   if: matrix.prop[1] != 'amd64'
      #   uses: docker/setup-qemu-action@v3

      - name: Set up QEMU
        if: steps.get_image.outputs.digest != '' && matrix.prop[1] != 'amd64'
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Run test for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }}
        if: steps.get_image.outputs.digest != '' 
        id: run_test
        uses: addnab/docker-run-action@v3
        continue-on-error: true
        with:
          image: ${{ matrix.prop[2] }}${{ matrix.image[1] }}
          shell: bash
          options: -v ${{ github.workspace }}:/work --platform linux/${{ matrix.prop[1] }}
          run: >
            echo "install default python..." &&
            export DEBIAN_FRONTEND=noninteractive && apt-get update -y && apt-get install -y python3 python3-venv &&
            echo "create venv and active..." &&
            cd /work &&
            python3 -m venv .venv &&
            . .venv/bin/activate &&
            echo "install icloudpd..." &&
            pip3 install --disable-pip-version-check --find-links /work/dist icloudpd==0.0.1234567890 &&
            echo "test icloud..." &&
            icloud --version &&
            echo "test icloudpd..." &&
            icloudpd --version &&
            echo "check if src..." &&
            (pip3 list --disable-pip-version-check | grep keyring | head -n 1 > /work/compatibility/pip.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass)

          # touch /work/compatibility/pip.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass

      - name: Record failure for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }}
        if: ${{ steps.run_test.outcome == 'failure' }} 
        run: |
          touch compatibility/pip.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail

      - name: Upload compatibility result
        if: steps.get_image.outputs.digest != '' 
        uses: actions/upload-artifact@v4
        with:
          name: icloudpd-compatibility-linux-pip-${{ matrix.image[0] }}-${{ matrix.prop[0] }}-apt
          if-no-files-found: error
          path: |
            compatibility/*

      - name: Run tzlc for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }}
        if: steps.get_image.outputs.digest != '' 
        id: run_tzlc
        uses: addnab/docker-run-action@v3
        continue-on-error: true
        with:
          image: ${{ matrix.prop[2] }}${{ matrix.image[1] }}
          shell: bash
          options: -v ${{ github.workspace }}:/work --platform linux/${{ matrix.prop[1] }}
          run: >
            echo "install default python, tzdata, locales..." &&
            export DEBIAN_FRONTEND=noninteractive && apt-get update -y && apt-get install -y python3 python3-venv tzdata locales-all &&
            echo "create venv and active..." &&
            cd /work &&
            python3 -m venv .venv &&
            . .venv/bin/activate &&
            echo "install icloudpd..." &&
            pip3 install --disable-pip-version-check --find-links /work/dist icloudpd==0.0.1234567890 &&
            echo "test icloud..." &&
            icloud --version &&
            echo "test icloudpd..." &&
            TZ=America/Los_Angeles LC_ALL=ru_RU.UTF-8 icloudpd --use-os-locale --version 1>.result &&
            cat .result &&
            mv .result /work/tzlc/pip.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass
    
      - name: Record failure tzlc for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }}
        if: ${{ steps.run_tzlc.outcome == 'failure' }} 
        run: |
          touch tzlc/pip.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail
    
      - name: Upload tzlc result
        if: steps.get_image.outputs.digest != '' 
        uses: actions/upload-artifact@v4
        with:
          name: icloudpd-tzlc-linux-pip-${{ matrix.image[0] }}-${{ matrix.prop[0] }}-apt
          if-no-files-found: error
          path: |
            tzlc/*
    
  compatibility_linux_pip_apk:
    name: "Compat PIP ${{ matrix.image[1] }} ${{ matrix.prop[1] }} apk"
    strategy: 
      fail-fast: false
      matrix:
        image: 
          - [ 
            "python3_13_alpine3_19", #variant name
            "python:3.13-alpine3.19", #image
            ] 
          - [ 
            "alpine_3_22", #variant name
            "alpine:3.22", #image
            ] 
          - [ 
            "alpine_3_21", #variant name
            "alpine:3.21", #image
            ] 
          - [ 
            "alpine_3_20", #variant name
            "alpine:3.20", #image
            ] 
          - [ 
            "alpine_3_19", #variant name
            "alpine:3.19", #image
            ] 
          - [ 
            "alpine_3_18", #variant name
            "alpine:3.18", #image
            ] 
          - [ 
            "alpine_3_17", #variant name
            "alpine:3.17", #image
            ] 
          - [ 
            "alpine_3_16", #variant name
            "alpine:3.16", #image
            ] 
          - [ 
            "alpine_3_15", #variant name
            "alpine:3.15", #image
            ] 
          - [ 
            "alpine_3_14", #variant name
            "alpine:3.14", #image
            ] 
          - [ 
            "alpine_3_13", #variant name
            "alpine:3.13", #image
            ] 
          # - [ 
          #   "alpine_3_12", #variant name
          #   "alpine:3.12", #image
          #   ] 
          # - [ 
          #   "alpine_3_11", #variant name
          #   "alpine:3.11", #image
          #   ] 
          # - [ 
          #   "alpine_3_10", #variant name
          #   "alpine:3.10", #image
          #   ] 
        prop: 
          - [
            "amd64",  # variant name
            "amd64",  # platform spec
            "",  # image prefix
          ]
          - [
            "arm64",  # variant name
            "arm64",  # platform spec
            "",  # image prefix
          ]
          - [
            "arm32v7",  # variant name
            "arm/v7",  # platform spec
            "arm32v7/",  # image prefix
          ]
    runs-on: ubuntu-22.04
    needs: 
      - clone_linux_whl
      - clone_src_whl
    defaults:
      run:
        shell: bash

    steps:

      - name: Get image
        id: get_image 
        run: | 
          echo digest=$(docker pull --platform linux/${{ matrix.prop[1] }} ${{ matrix.prop[2] }}${{ matrix.image[1] }} | grep Digest | head -n 1 | cut -d: -f 2-3 | tr -d ' ') >> $GITHUB_OUTPUT

      - name: Make folder for compatibility
        if: steps.get_image.outputs.digest != '' 
        run: |
          mkdir compatibility

      - name: Make folder for tzlc
        if: steps.get_image.outputs.digest != '' 
        run: |
          mkdir tzlc
  
      - name: Download artifacts (src)
        if: steps.get_image.outputs.digest != '' 
        uses: actions/download-artifact@v4
        with:
          name: icloudpd-dummywhl-src
          path: |
            dist

      - name: Download artifacts (linux)
        if: steps.get_image.outputs.digest != '' 
        uses: actions/download-artifact@v4
        with:
          name: icloudpd-dummywhl-linux
          path: |
            dist

      # - name: Set up QEMU
      #   if: matrix.prop[1] != 'amd64'
      #   uses: docker/setup-qemu-action@v3

      - name: Set up QEMU
        if: steps.get_image.outputs.digest != '' && matrix.prop[1] != 'amd64'
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Run test for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }}
        if: steps.get_image.outputs.digest != '' 
        id: run_test
        uses: addnab/docker-run-action@v3
        continue-on-error: true
        with:
          image: ${{ matrix.prop[2] }}${{ matrix.image[1] }}
          shell: sh
          options: -v ${{ github.workspace }}:/work --platform linux/${{ matrix.prop[1] }}
          run: >
            echo "install default python..." &&
            apk update && apk add python3 &&
            echo "create venv and active..." &&
            cd /work &&
            python3 -m venv .venv &&
            . .venv/bin/activate &&
            echo "install icloudpd..." &&
            pip3 install --disable-pip-version-check --find-links /work/dist icloudpd==0.0.1234567890 &&
            echo "test icloud..." &&
            icloud --version &&
            echo "test icloudpd..." &&
            icloudpd --version &&
            echo "check if src..." &&
            (pip3 list --disable-pip-version-check | grep keyring | head -n 1 > /work/compatibility/pip.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass)
          # touch /work/compatibility/pip.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass

      - name: Record failure for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }}
        if: ${{ steps.run_test.outcome == 'failure' }} 
        run: |
          touch compatibility/pip.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail

      - name: Upload compatibility result
        if: steps.get_image.outputs.digest != '' 
        uses: actions/upload-artifact@v4
        with:
          name: icloudpd-compatibility-linux-pip-${{ matrix.image[0] }}-${{ matrix.prop[0] }}-apk
          if-no-files-found: error
          path: |
            compatibility/*

      - name: Run tzlc for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }}
        if: steps.get_image.outputs.digest != '' 
        id: run_tzlc
        uses: addnab/docker-run-action@v3
        continue-on-error: true
        with:
          image: ${{ matrix.prop[2] }}${{ matrix.image[1] }}
          shell: sh
          options: -v ${{ github.workspace }}:/work --platform linux/${{ matrix.prop[1] }}
          run: >
            echo "install default python, tz, locale..." &&
            export MUSL_LOCPATH="/usr/share/i18n/locales/musl" &&
            apk update && apk add python3 tzdata musl-locales musl-locales-lang &&
            echo "create venv and active..." &&
            cd /work &&
            python3 -m venv .venv &&
            . .venv/bin/activate &&
            echo "install icloudpd..." &&
            pip3 install --disable-pip-version-check --find-links /work/dist icloudpd==0.0.1234567890 &&
            echo "test icloudpd..." &&
            TZ=America/Los_Angeles LC_ALL=ru_RU.UTF-8 icloudpd --use-os-locale --version 1>.result &&
            cat .result &&
            mv .result /work/tzlc/pip.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass

      - name: Record tzlc failure for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }}
        if: ${{ steps.run_tzlc.outcome == 'failure' }} 
        run: |
          touch tzlc/pip.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail

      - name: Upload tzlc result
        if: steps.get_image.outputs.digest != '' 
        uses: actions/upload-artifact@v4
        with:
          name: icloudpd-tzlc-linux-pip-${{ matrix.image[0] }}-${{ matrix.prop[0] }}-apk
          if-no-files-found: error
          path: |
            tzlc/*

  compatibility_macos_pip:
    name: "Compat PIP ${{ matrix.prop[0] }} ${{ matrix.prop[1] }}"
    strategy: 
      fail-fast: false
      matrix: 
        prop: 
          - [
            "macos-13",  # os
            "amd64",  # platform spec
          ]
          - [
            "macos-14",  # os
            "arm64",  # platform spec
          ]
    runs-on: ${{ matrix.prop[0] }}
    needs: 
      - clone_macos_whl
      - clone_src_whl

    steps:

      - name: Make folder for compatibility
        run: |
          mkdir compatibility

      - name: Make folder for tzlc
        run: |
          mkdir tzlc
  
      - name: Download artifacts (src)
        uses: actions/download-artifact@v4
        with:
          name: icloudpd-dummywhl-src
          path: |
            dist

      - name: Download artifacts (macos)
        uses: actions/download-artifact@v4
        with:
          name: icloudpd-dummywhl-macos
          path: |
            dist

      - name: Run test for ${{ matrix.prop[0] }} on ${{ matrix.prop[1] }}
        id: run_test
        continue-on-error: true
        run: >
          echo "create venv and active..." &&
          python3 -m venv .venv &&
          . .venv/bin/activate &&
          pip3 install --disable-pip-version-check --find-links dist icloudpd==0.0.1234567890 &&
          icloud --version &&
          icloudpd --version &&
          touch compatibility/pip.${{ matrix.prop[0] }}.${{ matrix.prop[1] }}.pass

        # &&
        # echo "check if src..."  &&
        # pip3 list --disable-pip-version-check | grep keyring | head -n 1 > compatibility/pip.${{ matrix.os }}.amd64.pass

      - name: Record failure for ${{ matrix.prop[0] }} on ${{ matrix.prop[1] }}
        if: ${{ steps.run_test.outcome == 'failure' }} 
        run: |
          touch compatibility/pip.${{ matrix.prop[0] }}.${{ matrix.prop[1] }}.fail

      - name: Upload compatibility result
        uses: actions/upload-artifact@v4
        with:
          name: icloudpd-compatibility-macos-pip-${{ matrix.prop[0] }}-${{ matrix.prop[1] }}
          if-no-files-found: error
          path: |
            compatibility/*

      - name: Run tzlc for ${{ matrix.prop[0] }} on ${{ matrix.prop[1] }}
        id: run_tzlc
        continue-on-error: true
        run: >
          echo "create venv and active..." &&
          python3 -m venv .venv &&
          . .venv/bin/activate &&
          pip3 install --disable-pip-version-check --find-links dist icloudpd==0.0.1234567890 &&
          TZ=America/Los_Angeles LC_ALL=ru_RU.UTF-8 icloudpd --use-os-locale --version 1>.result &&
          cat .result &&
          mv .result tzlc/pip.${{ matrix.prop[0] }}.${{ matrix.prop[1] }}.pass

        # &&
        # echo "check if src..."  &&
        # pip3 list --disable-pip-version-check | grep keyring | head -n 1 > compatibility/pip.${{ matrix.os }}.amd64.pass
    
      - name: Record failure tzlc for ${{ matrix.prop[0] }} on ${{ matrix.prop[1] }}
        if: ${{ steps.run_tzlc.outcome == 'failure' }} 
        run: |
          touch tzlc/pip.${{ matrix.prop[0] }}.${{ matrix.prop[1] }}.fail

      - name: Upload tzlc result
        uses: actions/upload-artifact@v4
        with:
          name: icloudpd-tzlc-macos-pip-${{ matrix.prop[0] }}-${{ matrix.prop[1] }}
          if-no-files-found: error
          path: |
            tzlc/*
      
  compatibility_windows_pip:
    name: "Compat PIP ${{ matrix.os }} on amd64"
    strategy: 
      fail-fast: false
      matrix: 
        os: [ "windows-2019", "windows-2022" ]
    runs-on: ${{ matrix.os }}
    needs: 
      - clone_windows_whl
      - clone_src_whl

    steps:

      - name: Make folder for compatibility
        run: |
          mkdir compatibility

      - name: Download artifacts (src)
        uses: actions/download-artifact@v4
        with:
          name: icloudpd-dummywhl-src
          path: |
            dist

      - name: Download artifacts (windows)
        uses: actions/download-artifact@v4
        with:
          name: icloudpd-dummywhl-windows
          path: |
            dist

      # https://learn.microsoft.com/en-us/cpp/c-runtime-library/language-strings?view=msvc-170&redirectedfrom=MSDN
      # languages
      - name: Run test for ${{ matrix.os }} on amd64
        id: run_test
        continue-on-error: true
        run: >
          pip3 install --disable-pip-version-check --find-links dist icloudpd==0.0.1234567890 &&
          icloud --version &&
          icloudpd --version &&
          touch compatibility/pip.${{ matrix.os }}.amd64.pass

        # &&
        # echo "check if src..."  &&
        # pip3 list --disable-pip-version-check | grep keyring | head -n 1 > compatibility/pip.${{ matrix.os }}.amd64.pass

      - name: Record failure for ${{ matrix.os }} on amd64
        if: ${{ steps.run_test.outcome == 'failure' }} 
        run: |
          touch compatibility/pip.${{ matrix.os }}.amd64.fail

      - name: Upload compatibility result
        uses: actions/upload-artifact@v4
        with:
          name: icloudpd-compatibility-windows-pip-${{ matrix.os }}-amd64
          if-no-files-found: error
          path: |
            compatibility/*

  compatibility_linux_bin_apt: 
    name: "Compat BIN ${{ matrix.image[1] }} ${{ matrix.prop[1] }} apt" 
    strategy:  
      fail-fast: false 
      matrix: 
        image:  
          - [  
            "debian_6_squeeze", #variant name 
            "debian:squeeze", #image 
            ]  
          - [  
            "debian_7_wheezy", #variant name 
            "debian:wheezy", #image 
            ]  
          - [  
            "debian_8_jessie", #variant name 
            "debian:jessie", #image 
            ]  
          - [  
            "debian_9_stretch", #variant name 
            "debian:stretch", #image 
            ]  
          - [  
            "debian_10_buster", #variant name 
            "debian:buster", #image 
            ]  
          - [  
            "debian_11_bullseye", #variant name 
            "debian:bullseye", #image 
            ]  
          - [  
            "debian_12_bookworm", #variant name 
            "debian:bookworm", #image 
            ]  
          - [  
            "ubuntu_12_precise", #variant name 
            "ubuntu:precise", #image 
            ]  
          - [  
            "ubuntu_14_trusty", #variant name 
            "ubuntu:trusty", #image 
            ]  
          - [  
            "ubuntu_16_xenial", #variant name 
            "ubuntu:xenial", #image 
            ]  
          - [  
            "ubuntu_18_bionic", #variant name 
            "ubuntu:bionic", #image 
            ]  
          - [  
            "ubuntu_20_focal", #variant name 
            "ubuntu:focal", #image 
            ]  
          - [  
            "ubuntu_22_jammy", #variant name 
            "ubuntu:jammy", #image 
            ]  
          - [  
            "ubuntu_24_noble", #variant name 
            "ubuntu:noble", #image 
            ]  
        prop:  
          - [ 
            "amd64",  # variant name 
            "amd64",  # platform spec 
            "",  # image prefix 
          ] 
          - [ 
            "arm64",  # variant name 
            "arm64",  # platform spec 
            "",  # image prefix 
          ] 
          - [ 
            "arm32v7",  # variant name 
            "arm/v7",  # platform spec 
            "arm32v7/",  # image prefix 
          ] 
    runs-on: ubuntu-22.04 
    needs: 
      - build_linux_apt
      # - build_linux_apk
    defaults: 
      run: 
        shell: bash 
 
    steps: 
 
      - name: Get image 
        id: get_image  
        run: |  
          echo digest=$(docker pull --platform linux/${{ matrix.prop[1] }} ${{ matrix.prop[2] }}${{ matrix.image[1] }} | grep Digest | head -n 1 | cut -d: -f 2-3 | tr -d ' ') >> $GITHUB_OUTPUT 
  
      - name: Make folder for compatibility 
        if: steps.get_image.outputs.digest != ''  
        run: | 
          mkdir compatibility 

      - name: Make folder for tzlc 
        if: steps.get_image.outputs.digest != ''  
        run: | 
          mkdir tzlc 
   
      - name: Download artifacts
        if: steps.get_image.outputs.digest != ''  
        uses: actions/download-artifact@v4 
        with: 
          pattern: icloudpd-bin-linux-*
          merge-multiple: true
          path: | 
            dist 
 
      # fails with "icloud: Failed to stat /proc/self/exe: Bad file descriptor" in bookwork arm64 
      # - name: Set up QEMU 
      #   if: matrix.prop[1] != 'amd64'
      #   uses: docker/setup-qemu-action@v3 
 
      - name: Set up QEMU 
        if: steps.get_image.outputs.digest != '' && matrix.prop[1] != 'amd64'
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes 
 
      - name: Run test for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: steps.get_image.outputs.digest != ''  
        id: run_test 
        uses: addnab/docker-run-action@v3 
        continue-on-error: true 
        with: 
          image: ${{ matrix.prop[2] }}${{ matrix.image[1] }} 
          shell: sh 
          options: -v ${{ github.workspace }}:/work --platform linux/${{ matrix.prop[1] }} 
          run: > 
            echo "prep test..." && 
            cd /work && 
            chmod +x dist/icloud-${{inputs.icloudpd_version}}-linux-${{ matrix.prop[0] }} && 
            chmod +x dist/icloudpd-${{inputs.icloudpd_version}}-linux-${{ matrix.prop[0] }} && 
            chmod +x dist/icloudpd-ex-${{inputs.icloudpd_version}}-linux-${{ matrix.prop[0] }} && 
            echo "test icloud..." && 
            dist/icloud-${{inputs.icloudpd_version}}-linux-${{ matrix.prop[0] }} --version && 
            echo "test icloudpd..." && 
            dist/icloudpd-${{inputs.icloudpd_version}}-linux-${{ matrix.prop[0] }} --version && 
            echo "test icloudpd-ex..." && 
            dist/icloudpd-ex-${{inputs.icloudpd_version}}-linux-${{ matrix.prop[0] }} --version && 
            touch /work/compatibility/bin.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass 
 
      - name: Record failure for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: ${{ steps.run_test.outcome == 'failure' }}  
        run: | 
          touch compatibility/bin.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail 
 
      - name: Upload compatibility result 
        if: steps.get_image.outputs.digest != ''  
        uses: actions/upload-artifact@v4 
        with: 
          name: icloudpd-compatibility-linux-bin-${{ matrix.image[0] }}-${{ matrix.prop[0] }}-apt
          if-no-files-found: error 
          path: | 
            compatibility/* 

      - name: Run tzlc for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: steps.get_image.outputs.digest != ''  
        id: run_tzlc 
        uses: addnab/docker-run-action@v3 
        continue-on-error: true 
        with: 
          image: ${{ matrix.prop[2] }}${{ matrix.image[1] }} 
          shell: sh 
          options: -v ${{ github.workspace }}:/work --platform linux/${{ matrix.prop[1] }} 
          run: > 
            echo "install tzdata and locales..." && 
            export DEBIAN_FRONTEND=noninteractive && apt-get update && apt-get install -y tzdata locales-all &&
            echo "prep test..." && 
            cd /work && 
            chmod +x dist/icloud-${{inputs.icloudpd_version}}-linux-${{ matrix.prop[0] }} && 
            chmod +x dist/icloudpd-${{inputs.icloudpd_version}}-linux-${{ matrix.prop[0] }} && 
            chmod +x dist/icloudpd-ex-${{inputs.icloudpd_version}}-linux-${{ matrix.prop[0] }} && 
            echo "test icloudpd..." && 
            TZ=America/Los_Angeles LC_ALL=ru_RU.UTF-8 dist/icloudpd-${{inputs.icloudpd_version}}-linux-${{ matrix.prop[0] }} --use-os-locale --version 1>.result && 
            cat .result &&
            mv .result /work/tzlc/bin.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass 
  
      - name: Record failure tzlc for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: ${{ steps.run_tzlc.outcome == 'failure' }}  
        run: | 
          touch tzlc/bin.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail 
  
      - name: Upload tzlc result 
        if: steps.get_image.outputs.digest != ''  
        uses: actions/upload-artifact@v4 
        with: 
          name: icloudpd-tzlc-linux-bin-${{ matrix.image[0] }}-${{ matrix.prop[0] }}-apt
          if-no-files-found: error 
          path: | 
            tzlc/* 

  compatibility_linux_bin_musl_apt: 
    name: "Compat BIN-M ${{ matrix.image[1] }} ${{ matrix.prop[1] }} apt" 
    strategy:  
      fail-fast: false 
      matrix: 
        image:  
          - [  
            "debian_6_squeeze", #variant name 
            "debian:squeeze", #image 
            ]  
          - [  
            "debian_7_wheezy", #variant name 
            "debian:wheezy", #image 
            ]  
          - [  
            "debian_8_jessie", #variant name 
            "debian:jessie", #image 
            ]  
          - [  
            "debian_9_stretch", #variant name 
            "debian:stretch", #image 
            ]  
          - [  
            "debian_10_buster", #variant name 
            "debian:buster", #image 
            ]  
          - [  
            "debian_11_bullseye", #variant name 
            "debian:bullseye", #image 
            ]  
          - [  
            "debian_12_bookworm", #variant name 
            "debian:bookworm", #image 
            ]  
          - [  
            "ubuntu_12_precise", #variant name 
            "ubuntu:precise", #image 
            ]  
          - [  
            "ubuntu_14_trusty", #variant name 
            "ubuntu:trusty", #image 
            ]  
          - [  
            "ubuntu_16_xenial", #variant name 
            "ubuntu:xenial", #image 
            ]  
          - [  
            "ubuntu_18_bionic", #variant name 
            "ubuntu:bionic", #image 
            ]  
          - [  
            "ubuntu_20_focal", #variant name 
            "ubuntu:focal", #image 
            ]  
          - [  
            "ubuntu_22_jammy", #variant name 
            "ubuntu:jammy", #image 
            ]  
          - [  
            "ubuntu_24_noble", #variant name 
            "ubuntu:noble", #image 
            ]  
        prop:  
          - [ 
            "amd64",  # variant name 
            "amd64",  # platform spec 
            "",  # image prefix 
          ] 
          - [ 
            "arm64",  # variant name 
            "arm64",  # platform spec 
            "",  # image prefix 
          ] 
          - [ 
            "arm32v7",  # variant name 
            "arm/v7",  # platform spec 
            "arm32v7/",  # image prefix 
          ] 
    runs-on: ubuntu-22.04 
    needs: 
      # - build_linux_apt
      - build_linux_apk
    defaults: 
      run: 
        shell: bash 
 
    steps: 
 
      - name: Get image 
        id: get_image  
        run: |  
          echo digest=$(docker pull --platform linux/${{ matrix.prop[1] }} ${{ matrix.prop[2] }}${{ matrix.image[1] }} | grep Digest | head -n 1 | cut -d: -f 2-3 | tr -d ' ') >> $GITHUB_OUTPUT 
  
      - name: Make folder for compatibility 
        if: steps.get_image.outputs.digest != ''  
        run: | 
          mkdir compatibility 

      - name: Make folder for tzlc 
        if: steps.get_image.outputs.digest != ''  
        run: | 
          mkdir tzlc 
   
      - name: Download artifacts
        if: steps.get_image.outputs.digest != ''  
        uses: actions/download-artifact@v4 
        with: 
          pattern: icloudpd-bin-linux-*
          merge-multiple: true
          path: | 
            dist 
 
      # fails with "icloud: Failed to stat /proc/self/exe: Bad file descriptor" in bookwork arm64 
      # - name: Set up QEMU 
      #   if: matrix.prop[1] != 'amd64'
      #   uses: docker/setup-qemu-action@v3 
 
      - name: Set up QEMU 
        if: steps.get_image.outputs.digest != '' && matrix.prop[1] != 'amd64'
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes 
 
      - name: Run test for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: steps.get_image.outputs.digest != ''  
        id: run_test 
        uses: addnab/docker-run-action@v3 
        continue-on-error: true 
        with: 
          image: ${{ matrix.prop[2] }}${{ matrix.image[1] }} 
          shell: sh 
          options: -v ${{ github.workspace }}:/work --platform linux/${{ matrix.prop[1] }} 
          run: > 
            echo "prep test..." && 
            cd /work && 
            chmod +x dist/icloud-${{inputs.icloudpd_version}}-linux-musl-${{ matrix.prop[0] }} && 
            chmod +x dist/icloudpd-${{inputs.icloudpd_version}}-linux-musl-${{ matrix.prop[0] }} && 
            chmod +x dist/icloudpd-ex-${{inputs.icloudpd_version}}-linux-musl-${{ matrix.prop[0] }} && 
            echo "test icloud..." && 
            dist/icloud-${{inputs.icloudpd_version}}-linux-musl-${{ matrix.prop[0] }} --version && 
            echo "test icloudpd..." && 
            dist/icloudpd-${{inputs.icloudpd_version}}-linux-musl-${{ matrix.prop[0] }} --version && 
            echo "test icloudpd-ex..." && 
            dist/icloudpd-ex-${{inputs.icloudpd_version}}-linux-musl-${{ matrix.prop[0] }} --version && 
            touch /work/compatibility/bin-musl.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass 
 
      - name: Record failure for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: ${{ steps.run_test.outcome == 'failure' }}  
        run: | 
          touch compatibility/bin-musl.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail 
 
      - name: Upload compatibility result 
        if: steps.get_image.outputs.digest != ''  
        uses: actions/upload-artifact@v4 
        with: 
          name: icloudpd-compatibility-linux-bin-musl-${{ matrix.image[0] }}-${{ matrix.prop[0] }}-apt
          if-no-files-found: error 
          path: | 
            compatibility/* 

      - name: Run tzlc for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: steps.get_image.outputs.digest != ''  
        id: run_tzlc 
        uses: addnab/docker-run-action@v3 
        continue-on-error: true 
        with: 
          image: ${{ matrix.prop[2] }}${{ matrix.image[1] }} 
          shell: sh 
          options: -v ${{ github.workspace }}:/work --platform linux/${{ matrix.prop[1] }} 
          run: > 
            echo "install tzdata and locales..." && 
            export DEBIAN_FRONTEND=noninteractive && apt-get update && apt-get install -y tzdata locales-all &&
            echo "prep test..." && 
            cd /work && 
            chmod +x dist/icloud-${{inputs.icloudpd_version}}-linux-musl-${{ matrix.prop[0] }} && 
            chmod +x dist/icloudpd-${{inputs.icloudpd_version}}-linux-musl-${{ matrix.prop[0] }} && 
            chmod +x dist/icloudpd-ex-${{inputs.icloudpd_version}}-linux-musl-${{ matrix.prop[0] }} && 
            echo "test icloudpd..." && 
            TZ=America/Los_Angeles LC_ALL=ru_RU.UTF-8 dist/icloudpd-${{inputs.icloudpd_version}}-linux-musl-${{ matrix.prop[0] }} --use-os-locale --version 1>.result && 
            cat .result &&
            mv .result /work/tzlc/bin-musl.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass 
  
      - name: Record failure tzlc for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: ${{ steps.run_tzlc.outcome == 'failure' }}  
        run: | 
          touch tzlc/bin-musl.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail 
  
      - name: Upload tzlc result 
        if: steps.get_image.outputs.digest != ''  
        uses: actions/upload-artifact@v4 
        with: 
          name: icloudpd-tzlc-linux-bin-musl-${{ matrix.image[0] }}-${{ matrix.prop[0] }}-apt
          if-no-files-found: error 
          path: | 
            tzlc/* 


  compatibility_linux_bin_apk: 
    name: "Compat BIN ${{ matrix.image[1] }} ${{ matrix.prop[1] }} apk" 
    strategy:  
      fail-fast: false 
      matrix: 
        image:  
          - [ 
            "alpine_3_22", #variant name
            "alpine:3.22", #image
            ] 
          - [ 
            "alpine_3_21", #variant name
            "alpine:3.21", #image
            ] 
          - [ 
            "alpine_3_20", #variant name
            "alpine:3.20", #image
            ] 
          - [ 
            "alpine_3_19", #variant name
            "alpine:3.19", #image
            ] 
          - [ 
            "alpine_3_18", #variant name
            "alpine:3.18", #image
            ] 
          - [ 
            "alpine_3_17", #variant name
            "alpine:3.17", #image
            ] 
          - [ 
            "alpine_3_16", #variant name
            "alpine:3.16", #image
            ] 
          - [ 
            "alpine_3_15", #variant name
            "alpine:3.15", #image
            ] 
          - [ 
            "alpine_3_14", #variant name
            "alpine:3.14", #image
            ] 
          - [ 
            "alpine_3_13", #variant name
            "alpine:3.13", #image
            ] 
          - [ 
            "alpine_3_12", #variant name
            "alpine:3.12", #image
            ] 
          - [ 
            "alpine_3_11", #variant name
            "alpine:3.11", #image
            ] 
          - [ 
            "alpine_3_10", #variant name
            "alpine:3.10", #image
            ] 
        prop:  
          - [ 
            "amd64",  # variant name 
            "amd64",  # platform spec 
            "",  # image prefix 
          ] 
          - [ 
            "arm64",  # variant name 
            "arm64",  # platform spec 
            "",  # image prefix 
          ] 
          - [ 
            "arm32v7",  # variant name 
            "arm/v7",  # platform spec 
            "arm32v7/",  # image prefix 
          ] 
    runs-on: ubuntu-22.04 
    needs: 
      - build_linux_apt
      # - build_linux_apk
    defaults: 
      run: 
        shell: bash 
  
    steps: 
  
      - name: Get image 
        id: get_image  
        run: |  
          echo digest=$(docker pull --platform linux/${{ matrix.prop[1] }} ${{ matrix.prop[2] }}${{ matrix.image[1] }} | grep Digest | head -n 1 | cut -d: -f 2-3 | tr -d ' ') >> $GITHUB_OUTPUT 
  
      - name: Make folder for compatibility 
        if: steps.get_image.outputs.digest != ''  
        run: | 
          mkdir compatibility 

      - name: Make folder for tzlc 
        if: steps.get_image.outputs.digest != ''  
        run: | 
          mkdir tzlc 
    
      - name: Download artifacts
        if: steps.get_image.outputs.digest != ''  
        uses: actions/download-artifact@v4 
        with: 
          pattern: icloudpd-bin-linux-*
          merge-multiple: true
          path: | 
            dist 
  
      # fails with "icloud: Failed to stat /proc/self/exe: Bad file descriptor" in bookwork arm64 
      # - name: Set up QEMU 
      #   if: matrix.prop[1] != 'amd64'
      #   uses: docker/setup-qemu-action@v3 
  
      - name: Set up QEMU 
        if: steps.get_image.outputs.digest != '' && matrix.prop[1] != 'amd64'
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes 
  
      - name: Run test for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: steps.get_image.outputs.digest != ''  
        id: run_test 
        uses: addnab/docker-run-action@v3 
        continue-on-error: true 
        with: 
          image: ${{ matrix.prop[2] }}${{ matrix.image[1] }} 
          shell: sh 
          options: -v ${{ github.workspace }}:/work --platform linux/${{ matrix.prop[1] }} 
          run: > 
            echo "prep test..." && 
            cd /work && 
            chmod +x dist/icloud-${{inputs.icloudpd_version}}-linux-${{ matrix.prop[0] }} && 
            chmod +x dist/icloudpd-${{inputs.icloudpd_version}}-linux-${{ matrix.prop[0] }} && 
            chmod +x dist/icloudpd-ex-${{inputs.icloudpd_version}}-linux-${{ matrix.prop[0] }} && 
            echo "test icloud..." && 
            dist/icloud-${{inputs.icloudpd_version}}-linux-${{ matrix.prop[0] }} --version && 
            echo "test icloudpd..." && 
            dist/icloudpd-${{inputs.icloudpd_version}}-linux-${{ matrix.prop[0] }} --version && 
            echo "test icloudpd-ex..." && 
            dist/icloudpd-ex-${{inputs.icloudpd_version}}-linux-${{ matrix.prop[0] }} --version && 
            touch /work/compatibility/bin.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass 
  
      - name: Record failure for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: ${{ steps.run_test.outcome == 'failure' }}  
        run: | 
          touch compatibility/bin.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail 
  
      - name: Upload compatibility result 
        if: steps.get_image.outputs.digest != ''  
        uses: actions/upload-artifact@v4 
        with: 
          name: icloudpd-compatibility-linux-bin-${{ matrix.image[0] }}-${{ matrix.prop[0] }}-apk
          if-no-files-found: error 
          path: | 
            compatibility/* 

      - name: Run tzlc for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: steps.get_image.outputs.digest != ''  
        id: run_tzlc 
        uses: addnab/docker-run-action@v3 
        continue-on-error: true 
        with: 
          image: ${{ matrix.prop[2] }}${{ matrix.image[1] }} 
          shell: sh 
          options: -v ${{ github.workspace }}:/work --platform linux/${{ matrix.prop[1] }} 
          run: > 
            echo "install tzdata and locales ..." && 
            export MUSL_LOCPATH="/usr/share/i18n/locales/musl" &&
            apk update && apk add tzdata musl-locales musl-locales-lang &&
            echo "prep test..." && 
            cd /work && 
            chmod +x dist/icloud-${{inputs.icloudpd_version}}-linux-${{ matrix.prop[0] }} && 
            chmod +x dist/icloudpd-${{inputs.icloudpd_version}}-linux-${{ matrix.prop[0] }} && 
            chmod +x dist/icloudpd-ex-${{inputs.icloudpd_version}}-linux-${{ matrix.prop[0] }} && 
            echo "test icloudpd..." && 
            TZ=America/Los_Angeles LC_ALL=ru_RU.UTF-8 dist/icloudpd-${{inputs.icloudpd_version}}-linux-${{ matrix.prop[0] }} --use-os-locale --version 1>.result && 
            cat .result &&
            mv .result /work/tzlc/bin.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass 
  
      - name: Record failure tzlc for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: ${{ steps.run_tzlc.outcome == 'failure' }}  
        run: | 
          touch tzlc/bin.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail 
  
      - name: Upload tzlc result 
        if: steps.get_image.outputs.digest != ''  
        uses: actions/upload-artifact@v4 
        with: 
          name: icloudpd-tzlc-linux-bin-${{ matrix.image[0] }}-${{ matrix.prop[0] }}-apk
          if-no-files-found: error 
          path: | 
            tzlc/* 
          

  compatibility_linux_bin_musl_apk: 
    name: "Compat BIN-M ${{ matrix.image[1] }} ${{ matrix.prop[1] }} apk" 
    strategy:  
      fail-fast: false 
      matrix: 
        image:  
          - [ 
            "alpine_3_22", #variant name
            "alpine:3.22", #image
            ] 
          - [ 
            "alpine_3_21", #variant name
            "alpine:3.21", #image
            ] 
          - [ 
            "alpine_3_20", #variant name
            "alpine:3.20", #image
            ] 
          - [ 
            "alpine_3_19", #variant name
            "alpine:3.19", #image
            ] 
          - [ 
            "alpine_3_18", #variant name
            "alpine:3.18", #image
            ] 
          - [ 
            "alpine_3_17", #variant name
            "alpine:3.17", #image
            ] 
          - [ 
            "alpine_3_16", #variant name
            "alpine:3.16", #image
            ] 
          - [ 
            "alpine_3_15", #variant name
            "alpine:3.15", #image
            ] 
          - [ 
            "alpine_3_14", #variant name
            "alpine:3.14", #image
            ] 
          - [ 
            "alpine_3_13", #variant name
            "alpine:3.13", #image
            ] 
          - [ 
            "alpine_3_12", #variant name
            "alpine:3.12", #image
            ] 
          - [ 
            "alpine_3_11", #variant name
            "alpine:3.11", #image
            ] 
          - [ 
            "alpine_3_10", #variant name
            "alpine:3.10", #image
            ] 
        prop:  
          - [ 
            "amd64",  # variant name 
            "amd64",  # platform spec 
            "",  # image prefix 
          ] 
          - [ 
            "arm64",  # variant name 
            "arm64",  # platform spec 
            "",  # image prefix 
          ] 
          - [ 
            "arm32v7",  # variant name 
            "arm/v7",  # platform spec 
            "arm32v7/",  # image prefix 
          ] 
    runs-on: ubuntu-22.04 
    needs: 
      # - build_linux_apt
      - build_linux_apk
    defaults: 
      run: 
        shell: bash 
  
    steps: 
  
      - name: Get image 
        id: get_image  
        run: |  
          echo digest=$(docker pull --platform linux/${{ matrix.prop[1] }} ${{ matrix.prop[2] }}${{ matrix.image[1] }} | grep Digest | head -n 1 | cut -d: -f 2-3 | tr -d ' ') >> $GITHUB_OUTPUT 
  
      - name: Make folder for compatibility 
        if: steps.get_image.outputs.digest != ''  
        run: | 
          mkdir compatibility 

      - name: Make folder for tzlc 
        if: steps.get_image.outputs.digest != ''  
        run: | 
          mkdir tzlc 
    
      - name: Download artifacts
        if: steps.get_image.outputs.digest != ''  
        uses: actions/download-artifact@v4 
        with: 
          pattern: icloudpd-bin-linux-*
          merge-multiple: true
          path: | 
            dist 
  
      # fails with "icloud: Failed to stat /proc/self/exe: Bad file descriptor" in bookwork arm64 
      # - name: Set up QEMU 
      #   if: matrix.prop[1] != 'amd64'
      #   uses: docker/setup-qemu-action@v3 
  
      - name: Set up QEMU 
        if: steps.get_image.outputs.digest != '' && matrix.prop[1] != 'amd64'
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes 
  
      - name: Run test for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: steps.get_image.outputs.digest != ''  
        id: run_test 
        uses: addnab/docker-run-action@v3 
        continue-on-error: true 
        with: 
          image: ${{ matrix.prop[2] }}${{ matrix.image[1] }} 
          shell: sh 
          options: -v ${{ github.workspace }}:/work --platform linux/${{ matrix.prop[1] }} 
          run: > 
            echo "prep test..." && 
            cd /work && 
            chmod +x dist/icloud-${{inputs.icloudpd_version}}-linux-musl-${{ matrix.prop[0] }} && 
            chmod +x dist/icloudpd-${{inputs.icloudpd_version}}-linux-musl-${{ matrix.prop[0] }} && 
            chmod +x dist/icloudpd-ex-${{inputs.icloudpd_version}}-linux-musl-${{ matrix.prop[0] }} && 
            echo "test icloud..." && 
            dist/icloud-${{inputs.icloudpd_version}}-linux-musl-${{ matrix.prop[0] }} --version && 
            echo "test icloudpd..." && 
            dist/icloudpd-${{inputs.icloudpd_version}}-linux-musl-${{ matrix.prop[0] }} --version && 
            echo "test icloudpd-ex..." && 
            dist/icloudpd-ex-${{inputs.icloudpd_version}}-linux-musl-${{ matrix.prop[0] }} --version && 
            touch /work/compatibility/bin-musl.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass 
  
      - name: Record failure for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: ${{ steps.run_test.outcome == 'failure' }}  
        run: | 
          touch compatibility/bin-musl.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail 
  
      - name: Upload compatibility result 
        if: steps.get_image.outputs.digest != ''  
        uses: actions/upload-artifact@v4 
        with: 
          name: icloudpd-compatibility-linux-bin-musl-${{ matrix.image[0] }}-${{ matrix.prop[0] }}-apk
          if-no-files-found: error 
          path: | 
            compatibility/* 

      - name: Run tzlc for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: steps.get_image.outputs.digest != ''  
        id: run_tzlc 
        uses: addnab/docker-run-action@v3 
        continue-on-error: true 
        with: 
          image: ${{ matrix.prop[2] }}${{ matrix.image[1] }} 
          shell: sh 
          options: -v ${{ github.workspace }}:/work --platform linux/${{ matrix.prop[1] }} 
          run: > 
            echo "install tzdata and locales ..." && 
            export MUSL_LOCPATH="/usr/share/i18n/locales/musl" &&
            apk update && apk add tzdata musl-locales musl-locales-lang &&
            echo "prep test..." && 
            cd /work && 
            chmod +x dist/icloud-${{inputs.icloudpd_version}}-linux-musl-${{ matrix.prop[0] }} && 
            chmod +x dist/icloudpd-${{inputs.icloudpd_version}}-linux-musl-${{ matrix.prop[0] }} && 
            chmod +x dist/icloudpd-ex-${{inputs.icloudpd_version}}-linux-musl-${{ matrix.prop[0] }} && 
            echo "test icloudpd..." && 
            TZ=America/Los_Angeles LC_ALL=ru_RU.UTF-8 dist/icloudpd-${{inputs.icloudpd_version}}-linux-musl-${{ matrix.prop[0] }} --use-os-locale --version 1>.result && 
            cat .result &&
            mv .result /work/tzlc/bin-musl.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass 
  
      - name: Record failure tzlc for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: ${{ steps.run_tzlc.outcome == 'failure' }}  
        run: | 
          touch tzlc/bin-musl.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail 
  
      - name: Upload tzlc result 
        if: steps.get_image.outputs.digest != ''  
        uses: actions/upload-artifact@v4 
        with: 
          name: icloudpd-tzlc-linux-bin-musl-${{ matrix.image[0] }}-${{ matrix.prop[0] }}-apk
          if-no-files-found: error 
          path: | 
            tzlc/* 

  compatibility_macos_bin: 
    name: "Compat BIN ${{ matrix.prop[0] }} ${{ matrix.prop[1] }}" 
    strategy:  
      fail-fast: false 
      matrix:  
        prop:  
          - [ 
            "macos-13", 
            "amd64", 
            ] 
          - [ 
            "macos-14", 
            "arm64", 
            ] 
 
    runs-on: ${{ matrix.prop[0] }} 
    needs: [ build_macos ] 
 
    steps: 
 
      - name: Make folder for compatibility 
        run: | 
          mkdir compatibility 

      - name: Make folder for tzlc 
        run: | 
          mkdir tzlc 
   
      - name: Download artifacts 
        uses: actions/download-artifact@v4 
        with: 
          name: icloudpd-bin-macos-amd64
          path: | 
            dist 
 
      - name: Run test for ${{ matrix.prop[0] }} on amd64 
        id: run_test 
        continue-on-error: true 
        run: > 
          echo "prep test..." && 
          chmod +x dist/icloud-${{inputs.icloudpd_version}}-macos-amd64 && 
          chmod +x dist/icloudpd-${{inputs.icloudpd_version}}-macos-amd64 && 
          chmod +x dist/icloudpd-ex-${{inputs.icloudpd_version}}-macos-amd64 && 
          echo "test icloud..." && 
          dist/icloud-${{inputs.icloudpd_version}}-macos-amd64 --version && 
          echo "test icloudpd..." && 
          dist/icloudpd-${{inputs.icloudpd_version}}-macos-amd64 --version && 
          echo "test icloudpd-ex..." && 
          dist/icloudpd-ex-${{inputs.icloudpd_version}}-macos-amd64 --version && 
          touch compatibility/bin.${{ matrix.prop[0] }}.${{ matrix.prop[1] }}.pass 
 
      - name: Record failure for ${{ matrix.prop[0] }} on amd64 
        if: ${{ steps.run_test.outcome == 'failure' }}  
        run: | 
          touch compatibility/bin.${{ matrix.prop[0] }}.${{ matrix.prop[1] }}.fail 
 
      - name: Upload compatibility result 
        uses: actions/upload-artifact@v4 
        with: 
          name: icloudpd-compatibility-macos-bin-${{ matrix.prop[0] }}-${{ matrix.prop[1] }}
          if-no-files-found: error 
          path: | 
            compatibility/* 

      - name: Run tzlc for ${{ matrix.prop[0] }} on amd64 
        id: run_tzlc 
        continue-on-error: true 
        run: > 
          echo "prep test..." && 
          chmod +x dist/icloud-${{inputs.icloudpd_version}}-macos-amd64 && 
          chmod +x dist/icloudpd-${{inputs.icloudpd_version}}-macos-amd64 && 
          chmod +x dist/icloudpd-ex-${{inputs.icloudpd_version}}-macos-amd64 && 
          echo "test icloudpd..." && 
          TZ=America/Los_Angeles LC_ALL=ru_RU.UTF-8 dist/icloudpd-${{inputs.icloudpd_version}}-macos-amd64 --use-os-locale --version 1>.result && 
          cat .result &&
          mv .result tzlc/bin.${{ matrix.prop[0] }}.${{ matrix.prop[1] }}.pass 
  
      - name: Record failure tzlc for ${{ matrix.prop[0] }} on amd64 
        if: ${{ steps.run_tzlc.outcome == 'failure' }}  
        run: | 
          touch tzlc/bin.${{ matrix.prop[0] }}.${{ matrix.prop[1] }}.fail 
  
      - name: Upload tzlc result 
        uses: actions/upload-artifact@v4 
        with: 
          name: icloudpd-tzlc-macos-bin-${{ matrix.prop[0] }}-${{ matrix.prop[1] }}
          if-no-files-found: error 
          path: | 
            tzlc/* 
                
  compatibility_windows_bin: 
    name: "Compat BIN ${{ matrix.prop[0] }} on amd64" 
    strategy:  
      fail-fast: false 
      matrix:  
        prop:  
          - [ 
            "windows-2019", # GH os 
            "windows", # file suffix 
            ] 
          - [ 
            "windows-2022", 
            "windows", 
            ] 
 
    runs-on: ${{ matrix.prop[0] }} 
    needs: [ build_windows ] 
 
    steps: 
 
      - name: Make folder for compatibility 
        run: | 
          mkdir compatibility 
 
      - name: Download artifacts 
        uses: actions/download-artifact@v4 
        with: 
          name: icloudpd-bin-windows-amd64 
          path: | 
            dist 
 
      - name: Run test for ${{ matrix.prop[0] }} on amd64 
        id: run_test 
        continue-on-error: true 
        run: > 
          echo "test icloud..." && 
          dist/icloud-${{inputs.icloudpd_version}}-${{ matrix.prop[1] }}-amd64.exe --version && 
          echo "test icloudpd..." && 
          dist/icloudpd-${{inputs.icloudpd_version}}-${{ matrix.prop[1] }}-amd64.exe --version && 
          echo "test icloudpd-ex..." && 
          dist/icloudpd-ex-${{inputs.icloudpd_version}}-${{ matrix.prop[1] }}-amd64.exe --version && 
          touch compatibility/bin.${{ matrix.prop[0] }}.amd64.pass 
 
      - name: Record failure for ${{ matrix.prop[0] }} on amd64 
        if: ${{ steps.run_test.outcome == 'failure' }}  
        run: | 
          touch compatibility/bin.${{ matrix.prop[0] }}.amd64.fail 
 
      - name: Upload compatibility result 
        uses: actions/upload-artifact@v4 
        with: 
          name: icloudpd-compatibility-windows-bin-${{ matrix.prop[0] }}-amd64
          if-no-files-found: error 
          path: | 
            compatibility/* 

  compatibility_docker: 
    name: "Compat DOCKER ${{ matrix.image[1] }} ${{ matrix.prop[1] }}" 
    strategy:  
      fail-fast: false 
      matrix: 
        image:  
          - [  
            "linux", #variant name 
            "", #image 
            ]  
        prop:  
          - [ 
            "amd64",  # variant name 
            "amd64",  # platform spec 
            "",  # image prefix 
          ] 
          - [ 
            "arm64",  # variant name 
            "arm64",  # platform spec 
            "",  # image prefix 
          ] 
          - [ 
            "arm32v7",  # variant name 
            "arm/v7",  # platform spec 
            "arm32v7/",  # image prefix 
          ] 
    runs-on: ubuntu-22.04 
    needs: [ build_docker ] 
    defaults: 
      run: 
        shell: bash 
 
    steps: 
 
      - name: Install JQ
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Setup config 
        shell: bash 
        run: >
          sudo mkdir -p /etc/docker &&
          sudo touch /etc/docker/daemon.json &&
          (cat /etc/docker/daemon.json | jq -ne --arg registry 172.17.0.1:5000 'input? // {} | ."insecure-registries" = (."insecure-registries" // []) + [$registry]' | sudo tee /etc/docker/daemon.json)

      - name: Reload Docker 
        id: reload_docker
        continue-on-error: true 
        shell: bash 
        run: >
           sudo systemctl daemon-reload &&
           sudo systemctl restart docker

      - name: Journal for Docker
        if: steps.reload_docker.outcome == 'failure'
        shell: bash
        run: journalctl -xeu docker.service

      - name: Start Registry 
        if: steps.reload_docker.outcome != 'failure'
        shell: bash 
        run: docker run -d -p 5000:5000 registry:2 
 
      - name: Download artifacts 
        if: steps.reload_docker.outcome != 'failure'
        uses: actions/download-artifact@v4 
        with: 
          name: icloudpd-oci
          path: | 
            dist 
 
      - name: Make folder for compatibility 
        if: steps.reload_docker.outcome != 'failure'
        run: | 
          mkdir compatibility 

      - name: Make folder for tzlc 
        if: steps.reload_docker.outcome != 'failure'
        run: | 
          mkdir tzlc 
            
      - name: Run skopeo 
        if: steps.reload_docker.outcome != 'failure'
        uses: addnab/docker-run-action@v3 
        with: 
          image: quay.io/skopeo/stable:v1.14.0 
          shell: sh 
          options: -v ${{ github.workspace }}/dist:/dist 
          run: > 
            (skopeo copy --preserve-digests --dest-tls-verify=false --all oci-archive:/dist/icloudpd-${{inputs.icloudpd_version}}-oci.tar docker://172.17.0.1:5000/icloudpd/icloudpd:commit-${{ github.sha }}) &&
            (skopeo copy --preserve-digests --src-tls-verify=false --dest-tls-verify=false --all docker://172.17.0.1:5000/icloudpd/icloudpd:commit-${{ github.sha }} docker://172.17.0.1:5000/icloudpd/icloudpd:latest)
  
      # - name: Set up QEMU 
      #   if: matrix.prop[1] != 'amd64'
      #   uses: docker/setup-qemu-action@v3 
 
      - name: Set up QEMU 
        if: steps.reload_docker.outcome != 'failure' && matrix.prop[1] != 'amd64'
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes 
 
      - name: Run test on ${{ matrix.prop[1] }} 
        if: steps.reload_docker.outcome != 'failure'
        id: run_test 
        continue-on-error: true 
        run: >
          (docker run --rm -i --platform linux/${{ matrix.prop[1] }} 172.17.0.1:5000/icloudpd/icloudpd:commit-${{ github.sha }} icloudpd --version) &&
          (docker run --rm -i --platform linux/${{ matrix.prop[1] }} 172.17.0.1:5000/icloudpd/icloudpd:latest icloudpd --version)
 
      - name: Record success on ${{ matrix.prop[1] }} 
        if: steps.reload_docker.outcome != 'failure' && steps.run_test.outcome != 'failure'
        run: | 
          touch compatibility/docker.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass 
 
      - name: Record failure on ${{ matrix.prop[1] }} 
        if: steps.run_test.outcome == 'failure'
        run: | 
          touch compatibility/docker.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail 
 
      - name: Upload compatibility result 
        if: steps.reload_docker.outcome != 'failure'
        uses: actions/upload-artifact@v4 
        with: 
          name: icloudpd-compatibility-docker-${{ matrix.image[0] }}-${{ matrix.prop[0] }}
          if-no-files-found: error 
          path: | 
            compatibility/* 

      - name: Run tzlc on ${{ matrix.prop[1] }} 
        if: steps.reload_docker.outcome != 'failure'
        id: run_tzlc 
        continue-on-error: true 
        run: >
          (docker run --rm -i --platform linux/${{ matrix.prop[1] }} -e TZ=America/Los_Angeles -e LC_ALL=ru_RU.UTF-8 172.17.0.1:5000/icloudpd/icloudpd:latest icloudpd --use-os-locale --version) 1>.result
  
      - name: Record success tzlc on ${{ matrix.prop[1] }} 
        if: steps.reload_docker.outcome != 'failure' && steps.run_tzlc.outcome != 'failure'
        run: > 
          cat .result &&
          mv .result tzlc/docker.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass 
  
      - name: Record failure tzlc on ${{ matrix.prop[1] }} 
        if: steps.run_tzlc.outcome == 'failure'
        run: | 
          touch tzlc/docker.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail 
  
      - name: Upload tzlc result 
        if: steps.reload_docker.outcome != 'failure'
        uses: actions/upload-artifact@v4 
        with: 
          name: icloudpd-tzlc-docker-${{ matrix.image[0] }}-${{ matrix.prop[0] }}
          if-no-files-found: error 
          path: | 
            tzlc/* 
    
            
  compatibility_linux_npm_apt: 
    name: "Compat NPM ${{ matrix.image[1] }} ${{ matrix.prop[1] }} apt" 
    strategy:  
      fail-fast: false 
      matrix: 
        image:  
          # apt-get does not work for debian 6 anymore
          # - [ 
          #   "debian_6_squeeze", #variant name
          #   "debian:squeeze", #image
          #   ] 
          # apt-get does not work for debian 7 anymore
          # - [ 
          #   "debian_7_wheezy", #variant name
          #   "debian:wheezy", #image
          #   ] 
          # apt-get does not work for debian 8 anymore
          # - [ 
          #   "debian_8_jessie", #variant name
          #   "debian:jessie", #image
          #   ] 
          # apt-get does not work for debian 9 anymore
          # - [ 
          #   "debian_9_stretch", #variant name
          #   "debian:stretch", #image
          #   ] 
          - [ 
            "debian_10_buster", #variant name
            "debian:buster", #image
            ] 
          - [ 
            "debian_11_bullseye", #variant name
            "debian:bullseye", #image
            ] 
          - [ 
            "debian_12_bookworm", #variant name
            "debian:bookworm", #image
            ] 
          - [ 
            "ubuntu_12_precise", #variant name
            "ubuntu:precise", #image
            ] 
          - [ 
            "ubuntu_14_trusty", #variant name
            "ubuntu:trusty", #image
            ] 
          - [ 
            "ubuntu_16_xenial", #variant name
            "ubuntu:xenial", #image
            ] 
          - [ 
            "ubuntu_18_bionic", #variant name
            "ubuntu:bionic", #image
            ] 
          - [ 
            "ubuntu_20_focal", #variant name
            "ubuntu:focal", #image
            ] 
          - [ 
            "ubuntu_22_jammy", #variant name
            "ubuntu:jammy", #image
            ] 
          - [ 
            "ubuntu_24_noble", #variant name
            "ubuntu:noble", #image
            ] 
        prop:  
          - [ 
            "amd64",  # variant name 
            "amd64",  # platform spec 
            "",  # image prefix 
          ] 
          - [ 
            "arm64",  # variant name 
            "arm64",  # platform spec 
            "",  # image prefix 
          ] 
          - [ 
            "arm32v7",  # variant name 
            "arm/v7",  # platform spec 
            "arm32v7/",  # image prefix 
          ] 
    runs-on: ubuntu-22.04 
    needs: [ build_npm ] 
    defaults: 
      run: 
        shell: bash 
 
    steps: 
 
      - name: Get image 
        id: get_image  
        run: |  
          echo digest=$(docker pull --platform linux/${{ matrix.prop[1] }} ${{ matrix.prop[2] }}${{ matrix.image[1] }} | grep Digest | head -n 1 | cut -d: -f 2-3 | tr -d ' ') >> $GITHUB_OUTPUT 

      - name: Setup Node for Registry Server
        if: steps.get_image.outputs.digest != '' 
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Create Config
        if: steps.get_image.outputs.digest != '' 
        run: |
          touch ${{ github.workspace }}/npm_config.yaml
          mkdir ${{ github.workspace }}/verdaccio
          echo "
          storage: ${{ github.workspace }}/verdaccio
          max_body_size: 1000mb
          log: { type: file, format: plain, level: debug, path: ${{ github.workspace }}/verdaccio.log }
          packages:
            '**':
              access: \$anonymous
              publish: \$anonymous
          listen:
            - 0.0.0.0:4873" > ${{ github.workspace }}/npm_config.yaml
          cat ${{ github.workspace }}/npm_config.yaml

      - name: Install Registry
        if: steps.get_image.outputs.digest != '' 
        shell: bash 
        run: npm install -g verdaccio@5

      - name: Start Registry 
        if: steps.get_image.outputs.digest != '' 
        shell: bash 
        run: verdaccio --config ${{ github.workspace }}/npm_config.yaml &

      - name: Make folder for compatibility 
        if: steps.get_image.outputs.digest != '' 
        run: | 
          mkdir compatibility 

      - name: Make folder for tzlc 
        if: steps.get_image.outputs.digest != '' 
        run: | 
          mkdir tzlc 
   
      - name: Download artifacts
        if: steps.get_image.outputs.digest != '' 
        uses: actions/download-artifact@v4 
        with: 
          name: icloudpd-npm
          path: | 
            dist/npm

      - name: Setup Node for Test
        if: steps.get_image.outputs.digest != '' 
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'http://localhost:4873'
        env:
          NODE_AUTH_TOKEN: "fake"
          
      - name: Publish NPM
        if: steps.get_image.outputs.digest != '' 
        run: |
          npm publish dist/npm/@icloudpd/linux-arm --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/linux-arm64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/linux-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/win32-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/darwin-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/darwin-arm64 --access public --registry http://localhost:4873
          npm publish dist/npm/icloudpd --access public --registry http://localhost:4873
        env:
          NODE_AUTH_TOKEN: "fake"

      - name: Set up QEMU 
        if: steps.get_image.outputs.digest != '' && matrix.prop[1] != 'amd64'
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes 
 
      - name: Run test for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: steps.get_image.outputs.digest != ''  
        id: run_test 
        uses: addnab/docker-run-action@v3 
        continue-on-error: true 
        with: 
          image: ${{ matrix.prop[2] }}${{ matrix.image[1] }} 
          shell: sh 
          options: -v ${{ github.workspace }}:/work --platform linux/${{ matrix.prop[1] }} 
          run: > 
            echo "install npm..." && 
            export DEBIAN_FRONTEND=noninteractive && apt-get update && apt-get install -y npm &&
            echo "test icloudpd..." && 
            npm install -g --registry http://172.17.0.1:4873 icloudpd@${{inputs.icloudpd_version}} &&
            icloudpd --version  &&
            touch /work/compatibility/npm.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass 
 
      - name: Record failure for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: ${{ steps.run_test.outcome == 'failure' }}  
        run: | 
          touch compatibility/npm.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail 
 
      - name: Upload compatibility result 
        if: steps.get_image.outputs.digest != ''  
        uses: actions/upload-artifact@v4 
        with: 
          name: icloudpd-compatibility-linux-npm-${{ matrix.image[0] }}-${{ matrix.prop[0] }}-apt
          if-no-files-found: error 
          path: | 
            compatibility/* 

      - name: Run tzlc for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: steps.get_image.outputs.digest != ''  
        id: run_tzlc 
        uses: addnab/docker-run-action@v3 
        continue-on-error: true 
        with: 
          image: ${{ matrix.prop[2] }}${{ matrix.image[1] }} 
          shell: sh 
          options: -v ${{ github.workspace }}:/work --platform linux/${{ matrix.prop[1] }} 
          run: > 
            echo "install npm, tzdata, locales..." && 
            export DEBIAN_FRONTEND=noninteractive && apt-get update && apt-get install -y npm tzdata locales-all&&
            echo "test icloudpd..." && 
            npm install -g --registry http://172.17.0.1:4873 icloudpd@${{inputs.icloudpd_version}} &&
            TZ=America/Los_Angeles LC_ALL=ru_RU.UTF-8 icloudpd --use-os-locale --version 1>.result &&
            cat .result &&
            mv .result /work/tzlc/npm.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass 
  
      - name: Record failure tzlc for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: ${{ steps.run_tzlc.outcome == 'failure' }}  
        run: | 
          touch tzlc/npm.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail 
  
      - name: Upload tzlc result 
        if: steps.get_image.outputs.digest != ''  
        uses: actions/upload-artifact@v4 
        with: 
          name: icloudpd-tzlc-linux-npm-${{ matrix.image[0] }}-${{ matrix.prop[0] }}-apt
          if-no-files-found: error 
          path: | 
            tzlc/* 
    
  compatibility_linux_npx_apt: 
    name: "Compat NPX ${{ matrix.image[1] }} ${{ matrix.prop[1] }} apt" 
    strategy:  
      fail-fast: false 
      matrix: 
        image:  
          # apt-get does not work for debian 6 anymore
          # - [ 
          #   "debian_6_squeeze", #variant name
          #   "debian:squeeze", #image
          #   ] 
          # apt-get does not work for debian 7 anymore
          # - [ 
          #   "debian_7_wheezy", #variant name
          #   "debian:wheezy", #image
          #   ] 
          # apt-get does not work for debian 8 anymore
          # - [ 
          #   "debian_8_jessie", #variant name
          #   "debian:jessie", #image
          #   ] 
          # apt-get does not work for debian 9 anymore
          # - [ 
          #   "debian_9_stretch", #variant name
          #   "debian:stretch", #image
          #   ] 
          - [ 
            "debian_10_buster", #variant name
            "debian:buster", #image
            ] 
          - [ 
            "debian_11_bullseye", #variant name
            "debian:bullseye", #image
            ] 
          - [ 
            "debian_12_bookworm", #variant name
            "debian:bookworm", #image
            ] 
          - [ 
            "ubuntu_12_precise", #variant name
            "ubuntu:precise", #image
            ] 
          - [ 
            "ubuntu_14_trusty", #variant name
            "ubuntu:trusty", #image
            ] 
          - [ 
            "ubuntu_16_xenial", #variant name
            "ubuntu:xenial", #image
            ] 
          - [ 
            "ubuntu_18_bionic", #variant name
            "ubuntu:bionic", #image
            ] 
          - [ 
            "ubuntu_20_focal", #variant name
            "ubuntu:focal", #image
            ] 
          - [ 
            "ubuntu_22_jammy", #variant name
            "ubuntu:jammy", #image
            ] 
          - [ 
            "ubuntu_24_noble", #variant name
            "ubuntu:noble", #image
            ] 
        prop:  
          - [ 
            "amd64",  # variant name 
            "amd64",  # platform spec 
            "",  # image prefix 
          ] 
          - [ 
            "arm64",  # variant name 
            "arm64",  # platform spec 
            "",  # image prefix 
          ] 
          - [ 
            "arm32v7",  # variant name 
            "arm/v7",  # platform spec 
            "arm32v7/",  # image prefix 
          ] 
    runs-on: ubuntu-22.04 
    needs: [ build_npm ] 
    defaults: 
      run: 
        shell: bash 
 
    steps: 
 
      - name: Get image 
        id: get_image  
        run: |  
          echo digest=$(docker pull --platform linux/${{ matrix.prop[1] }} ${{ matrix.prop[2] }}${{ matrix.image[1] }} | grep Digest | head -n 1 | cut -d: -f 2-3 | tr -d ' ') >> $GITHUB_OUTPUT 

      - name: Checkout code
        if: steps.get_image.outputs.digest != '' 
        uses: actions/checkout@v4

      - name: Setup Node for Registry Server
        if: steps.get_image.outputs.digest != '' 
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Create Config
        if: steps.get_image.outputs.digest != '' 
        run: |
          touch ${{ github.workspace }}/npm_config.yaml
          mkdir ${{ github.workspace }}/verdaccio
          echo "
          storage: ${{ github.workspace }}/verdaccio
          max_body_size: 1000mb
          log: { type: file, format: plain, level: debug, path: ${{ github.workspace }}/verdaccio.log }
          packages:
            '**':
              access: \$anonymous
              publish: \$anonymous
          listen:
            - 0.0.0.0:4873" > ${{ github.workspace }}/npm_config.yaml
          cat ${{ github.workspace }}/npm_config.yaml

      - name: Install Registry
        if: steps.get_image.outputs.digest != '' 
        shell: bash 
        run: npm install -g verdaccio@5

      - name: Start Registry 
        if: steps.get_image.outputs.digest != '' 
        shell: bash 
        run: verdaccio --config ${{ github.workspace }}/npm_config.yaml &

      - name: Make folder for compatibility 
        if: steps.get_image.outputs.digest != '' 
        run: | 
          mkdir compatibility 

      - name: Make folder for tzlc 
        if: steps.get_image.outputs.digest != '' 
        run: | 
          mkdir tzlc 
   
      - name: Download artifacts
        if: steps.get_image.outputs.digest != '' 
        uses: actions/download-artifact@v4 
        with: 
          name: icloudpd-npm
          path: | 
            dist/npm

      - name: Setup Node for Test
        if: steps.get_image.outputs.digest != '' 
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'http://localhost:4873'
        env:
          NODE_AUTH_TOKEN: "fake"
          
      - name: Publish NPM
        if: steps.get_image.outputs.digest != '' 
        run: |
          npm publish dist/npm/@icloudpd/linux-arm --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/linux-arm64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/linux-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/win32-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/darwin-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/darwin-arm64 --access public --registry http://localhost:4873
          npm publish dist/npm/icloudpd --access public --registry http://localhost:4873
        env:
          NODE_AUTH_TOKEN: "fake"

      - name: Set up QEMU 
        if: steps.get_image.outputs.digest != '' && matrix.prop[1] != 'amd64'
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes 
 
      - name: Run test for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: steps.get_image.outputs.digest != ''  
        id: run_test 
        uses: addnab/docker-run-action@v3 
        continue-on-error: true 
        with: 
          image: ${{ matrix.prop[2] }}${{ matrix.image[1] }} 
          shell: bash 
          options: -v ${{ github.workspace }}:/work --platform linux/${{ matrix.prop[1] }} 
          run: > 
            echo "install npm..." && 
            export DEBIAN_FRONTEND=noninteractive && apt-get update && apt-get install -y npm &&
            /work/scripts/npx_optional_touch /work/compatibility/npx.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass /work/compatibility/npx.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.na -y --registry http://172.17.0.1:4873 icloudpd@${{inputs.icloudpd_version}} --version
 
      - name: Record failure for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: ${{ steps.run_test.outcome == 'failure' }}  
        run: | 
          touch compatibility/npx.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail 
 
      - name: Upload compatibility result 
        if: steps.get_image.outputs.digest != ''  
        uses: actions/upload-artifact@v4 
        with: 
          name: icloudpd-compatibility-linux-npx-${{ matrix.image[0] }}-${{ matrix.prop[0] }}-apt
          if-no-files-found: error 
          path: | 
            compatibility/* 

      - name: Run tzlc for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: steps.get_image.outputs.digest != ''  
        id: run_tzlc 
        uses: addnab/docker-run-action@v3 
        continue-on-error: true 
        with: 
          image: ${{ matrix.prop[2] }}${{ matrix.image[1] }} 
          shell: bash 
          options: -v ${{ github.workspace }}:/work --platform linux/${{ matrix.prop[1] }} 
          run: > 
            echo "install npm, tzdata, locales..." && 
            export DEBIAN_FRONTEND=noninteractive && apt-get update && apt-get install -y npm tzdata locales-all &&
            TZ=America/Los_Angeles LC_ALL=ru_RU.UTF-8 /work/scripts/npx_optional /work/tzlc/npx.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass /work/tzlc/npx.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.na -y --registry http://172.17.0.1:4873 icloudpd@${{inputs.icloudpd_version}} --use-os-locale --version
  
      - name: Record failure tzlc for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: ${{ steps.run_tzlc.outcome == 'failure' }}  
        run: | 
          touch tzlc/npx.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail 
  
      - name: Upload tzlc result 
        if: steps.get_image.outputs.digest != ''  
        uses: actions/upload-artifact@v4 
        with: 
          name: icloudpd-tzlc-linux-npx-${{ matrix.image[0] }}-${{ matrix.prop[0] }}-apt
          if-no-files-found: error 
          path: | 
            tzlc/* 
    

  compatibility_linux_npm_apk:
    name: "Compat NPM ${{ matrix.image[1] }} ${{ matrix.prop[1] }} apk" 
    strategy:  
      fail-fast: false 
      matrix: 
        image:  
          - [ 
            "alpine_3_22", #variant name
            "alpine:3.22", #image
            ] 
          - [ 
            "alpine_3_21", #variant name
            "alpine:3.21", #image
            ] 
          - [ 
            "alpine_3_20", #variant name
            "alpine:3.20", #image
            ] 
          - [ 
            "alpine_3_19", #variant name
            "alpine:3.19", #image
            ] 
          - [ 
            "alpine_3_18", #variant name
            "alpine:3.18", #image
            ] 
          - [ 
            "alpine_3_17", #variant name
            "alpine:3.17", #image
            ] 
          - [ 
            "alpine_3_16", #variant name
            "alpine:3.16", #image
            ] 
          - [ 
            "alpine_3_15", #variant name
            "alpine:3.15", #image
            ] 
          - [ 
            "alpine_3_14", #variant name
            "alpine:3.14", #image
            ] 
          - [ 
            "alpine_3_13", #variant name
            "alpine:3.13", #image
            ] 
        prop:  
          - [ 
            "amd64",  # variant name 
            "amd64",  # platform spec 
            "",  # image prefix 
          ] 
          - [ 
            "arm64",  # variant name 
            "arm64",  # platform spec 
            "",  # image prefix 
          ] 
          # hangs with QEMU https://github.com/nodejs/docker-node/issues/1973
          # - [ 
          #   "arm32v7",  # variant name 
          #   "arm/v7",  # platform spec 
          #   "arm32v7/",  # image prefix 
          # ] 
    runs-on: ubuntu-22.04 
    needs: [ build_npm ] 
    defaults: 
      run: 
        shell: bash 
 
    steps: 
 
      - name: Get image 
        id: get_image  
        run: |  
          echo digest=$(docker pull --platform linux/${{ matrix.prop[1] }} ${{ matrix.prop[2] }}${{ matrix.image[1] }} | grep Digest | head -n 1 | cut -d: -f 2-3 | tr -d ' ') >> $GITHUB_OUTPUT 

      - name: Setup Node for Registry Server
        if: steps.get_image.outputs.digest != '' 
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Create Config
        if: steps.get_image.outputs.digest != '' 
        run: |
          touch ${{ github.workspace }}/npm_config.yaml
          mkdir ${{ github.workspace }}/verdaccio
          echo "
          storage: ${{ github.workspace }}/verdaccio
          max_body_size: 1000mb
          log: { type: file, format: plain, level: debug, path: ${{ github.workspace }}/verdaccio.log }
          packages:
            '**':
              access: \$anonymous
              publish: \$anonymous
          listen:
            - 0.0.0.0:4873" > ${{ github.workspace }}/npm_config.yaml
          cat ${{ github.workspace }}/npm_config.yaml

      - name: Install Registry
        if: steps.get_image.outputs.digest != '' 
        shell: bash 
        run: npm install -g verdaccio@5

      - name: Start Registry 
        if: steps.get_image.outputs.digest != '' 
        shell: bash 
        run: verdaccio --config ${{ github.workspace }}/npm_config.yaml &

      - name: Make folder for compatibility 
        if: steps.get_image.outputs.digest != '' 
        run: | 
          mkdir compatibility 

      - name: Make folder for tzlc 
        if: steps.get_image.outputs.digest != '' 
        run: | 
          mkdir tzlc 
            
      - name: Download artifacts
        if: steps.get_image.outputs.digest != '' 
        uses: actions/download-artifact@v4 
        with: 
          name: icloudpd-npm
          path: | 
            dist/npm

      - name: Setup Node for Test
        if: steps.get_image.outputs.digest != '' 
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'http://localhost:4873'
        env:
          NODE_AUTH_TOKEN: "fake"
          
      - name: Publish NPM
        if: steps.get_image.outputs.digest != '' 
        run: |
          npm publish dist/npm/@icloudpd/linux-arm --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/linux-arm64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/linux-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/win32-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/darwin-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/darwin-arm64 --access public --registry http://localhost:4873
          npm publish dist/npm/icloudpd --access public --registry http://localhost:4873
        env:
          NODE_AUTH_TOKEN: "fake"

      - name: Set up QEMU 
        if: steps.get_image.outputs.digest != '' && matrix.prop[1] != 'amd64'
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes 
  
      - name: Run test for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: steps.get_image.outputs.digest != ''  
        id: run_test 
        uses: addnab/docker-run-action@v3 
        continue-on-error: true 
        with: 
          image: ${{ matrix.prop[2] }}${{ matrix.image[1] }} 
          shell: sh 
          options: -v ${{ github.workspace }}:/work --platform linux/${{ matrix.prop[1] }} 
          run: > 
            echo "install npm..." && 
            apk update && apk add npm &&
            echo "test icloudpd..." && 
            npm install -g --registry http://172.17.0.1:4873 icloudpd@${{inputs.icloudpd_version}} &&
            icloudpd --version  &&
            touch /work/compatibility/npm.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass 

      - name: Record failure for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: ${{ steps.run_test.outcome == 'failure' }}  
        run: | 
          touch compatibility/npm.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail 
 
      - name: Upload compatibility result 
        if: steps.get_image.outputs.digest != ''  
        uses: actions/upload-artifact@v4 
        with: 
          name: icloudpd-compatibility-linux-npm-${{ matrix.image[0] }}-${{ matrix.prop[0] }}-apk
          if-no-files-found: error 
          path: | 
            compatibility/* 

      - name: Run tzlc for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: steps.get_image.outputs.digest != ''  
        id: run_tzlc 
        uses: addnab/docker-run-action@v3 
        continue-on-error: true 
        with: 
          image: ${{ matrix.prop[2] }}${{ matrix.image[1] }} 
          shell: sh 
          options: -v ${{ github.workspace }}:/work --platform linux/${{ matrix.prop[1] }} 
          run: > 
            echo "install npm, tzdata, locales..." && 
            export MUSL_LOCPATH="/usr/share/i18n/locales/musl" &&
            apk update && apk add npm tzdata musl-locales musl-locales-lang &&
            echo "test icloudpd..." && 
            npm install -g --registry http://172.17.0.1:4873 icloudpd@${{inputs.icloudpd_version}} &&
            TZ=America/Los_Angeles LC_ALL=ru_RU.UTF-8 icloudpd --use-os-locale --version 1>.result &&
            cat .result &&
            mv .result /work/tzlc/npm.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass 

      - name: Record failure tzlc for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: ${{ steps.run_tzlc.outcome == 'failure' }}  
        run: | 
          touch tzlc/npm.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail 
  
      - name: Upload tzlc result 
        if: steps.get_image.outputs.digest != ''  
        uses: actions/upload-artifact@v4 
        with: 
          name: icloudpd-tzlc-linux-npm-${{ matrix.image[0] }}-${{ matrix.prop[0] }}-apt
          if-no-files-found: error 
          path: | 
            tzlc/* 
    
  compatibility_linux_npx_apk:
    name: "Compat NPX ${{ matrix.image[1] }} ${{ matrix.prop[1] }} apk" 
    strategy:  
      fail-fast: false 
      matrix: 
        image:  
          - [ 
            "alpine_3_22", #variant name
            "alpine:3.22", #image
            ] 
          - [ 
            "alpine_3_21", #variant name
            "alpine:3.21", #image
            ] 
          - [ 
            "alpine_3_20", #variant name
            "alpine:3.20", #image
            ] 
          - [ 
            "alpine_3_19", #variant name
            "alpine:3.19", #image
            ] 
          - [ 
            "alpine_3_18", #variant name
            "alpine:3.18", #image
            ] 
          - [ 
            "alpine_3_17", #variant name
            "alpine:3.17", #image
            ] 
          - [ 
            "alpine_3_16", #variant name
            "alpine:3.16", #image
            ] 
          - [ 
            "alpine_3_15", #variant name
            "alpine:3.15", #image
            ] 
          - [ 
            "alpine_3_14", #variant name
            "alpine:3.14", #image
            ] 
          - [ 
            "alpine_3_13", #variant name
            "alpine:3.13", #image
            ] 
        prop:  
          - [ 
            "amd64",  # variant name 
            "amd64",  # platform spec 
            "",  # image prefix 
          ] 
          - [ 
            "arm64",  # variant name 
            "arm64",  # platform spec 
            "",  # image prefix 
          ] 
          # hangs with QEMU https://github.com/nodejs/docker-node/issues/1973
          # - [ 
          #   "arm32v7",  # variant name 
          #   "arm/v7",  # platform spec 
          #   "arm32v7/",  # image prefix 
          # ] 
    runs-on: ubuntu-22.04 
    needs: [ build_npm ] 
    defaults: 
      run: 
        shell: bash 
 
    steps: 
 
      - name: Get image 
        id: get_image  
        run: |  
          echo digest=$(docker pull --platform linux/${{ matrix.prop[1] }} ${{ matrix.prop[2] }}${{ matrix.image[1] }} | grep Digest | head -n 1 | cut -d: -f 2-3 | tr -d ' ') >> $GITHUB_OUTPUT 

      - name: Setup Node for Registry Server
        if: steps.get_image.outputs.digest != '' 
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Create Config
        if: steps.get_image.outputs.digest != '' 
        run: |
          touch ${{ github.workspace }}/npm_config.yaml
          mkdir ${{ github.workspace }}/verdaccio
          echo "
          storage: ${{ github.workspace }}/verdaccio
          max_body_size: 1000mb
          log: { type: file, format: plain, level: debug, path: ${{ github.workspace }}/verdaccio.log }
          packages:
            '**':
              access: \$anonymous
              publish: \$anonymous
          listen:
            - 0.0.0.0:4873" > ${{ github.workspace }}/npm_config.yaml
          cat ${{ github.workspace }}/npm_config.yaml

      - name: Install Registry
        if: steps.get_image.outputs.digest != '' 
        shell: bash 
        run: npm install -g verdaccio@5

      - name: Start Registry 
        if: steps.get_image.outputs.digest != '' 
        shell: bash 
        run: verdaccio --config ${{ github.workspace }}/npm_config.yaml &

      - name: Make folder for compatibility 
        if: steps.get_image.outputs.digest != '' 
        run: | 
          mkdir compatibility 

      - name: Make folder for tzlc 
        if: steps.get_image.outputs.digest != '' 
        run: | 
          mkdir tzlc 
            
      - name: Download artifacts
        if: steps.get_image.outputs.digest != '' 
        uses: actions/download-artifact@v4 
        with: 
          name: icloudpd-npm
          path: | 
            dist/npm

      - name: Setup Node for Test
        if: steps.get_image.outputs.digest != '' 
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'http://localhost:4873'
        env:
          NODE_AUTH_TOKEN: "fake"
          
      - name: Publish NPM
        if: steps.get_image.outputs.digest != '' 
        run: |
          npm publish dist/npm/@icloudpd/linux-arm --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/linux-arm64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/linux-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/win32-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/darwin-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/darwin-arm64 --access public --registry http://localhost:4873
          npm publish dist/npm/icloudpd --access public --registry http://localhost:4873
        env:
          NODE_AUTH_TOKEN: "fake"

      - name: Set up QEMU 
        if: steps.get_image.outputs.digest != '' && matrix.prop[1] != 'amd64'
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes 
  
      - name: Run test for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: steps.get_image.outputs.digest != ''  
        id: run_test 
        uses: addnab/docker-run-action@v3 
        continue-on-error: true 
        with: 
          image: ${{ matrix.prop[2] }}${{ matrix.image[1] }} 
          shell: sh 
          options: -v ${{ github.workspace }}:/work --platform linux/${{ matrix.prop[1] }} 
          run: > 
            echo "install npm..." && 
            apk update && apk add npm &&
            echo "test icloudpd..." && 
            npx -y --registry http://172.17.0.1:4873 icloudpd@${{inputs.icloudpd_version}} --version &&
            touch /work/compatibility/npx.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass
 
      - name: Record failure for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: ${{ steps.run_test.outcome == 'failure' }}  
        run: | 
          touch compatibility/npx.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail 
 
      - name: Upload compatibility result 
        if: steps.get_image.outputs.digest != ''  
        uses: actions/upload-artifact@v4 
        with: 
          name: icloudpd-compatibility-linux-npx-${{ matrix.image[0] }}-${{ matrix.prop[0] }}-apk
          if-no-files-found: error 
          path: | 
            compatibility/* 

      - name: Run tzlc for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: steps.get_image.outputs.digest != ''  
        id: run_tzlc 
        uses: addnab/docker-run-action@v3 
        continue-on-error: true 
        with: 
          image: ${{ matrix.prop[2] }}${{ matrix.image[1] }} 
          shell: sh 
          options: -v ${{ github.workspace }}:/work --platform linux/${{ matrix.prop[1] }} 
          run: > 
            echo "install npm, tzdata, locales..." && 
            export MUSL_LOCPATH="/usr/share/i18n/locales/musl" &&
            apk update && apk add npm tzdata musl-locales musl-locales-lang &&
            echo "test icloudpd..." && 
            TZ=America/Los_Angeles LC_ALL=ru_RU.UTF-8 npx -y --registry http://172.17.0.1:4873 icloudpd@${{inputs.icloudpd_version}} --use-os-locale --version 1>.result &&
            cat .result &&
            mv .result /work/tzlc/npx.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass
  
      - name: Record failure tzlc for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: ${{ steps.run_tzlc.outcome == 'failure' }}  
        run: | 
          touch tzlc/npx.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail 
  
      - name: Upload tzlc result 
        if: steps.get_image.outputs.digest != ''  
        uses: actions/upload-artifact@v4 
        with: 
          name: icloudpd-tzlc-linux-npx-${{ matrix.image[0] }}-${{ matrix.prop[0] }}-apk
          if-no-files-found: error 
          path: | 
            tzlc/* 
    

  # record QEMU failures for completeness
  compatibility_linux_npm_apk_fail:
    name: "Compat NPM/NPX ${{ matrix.image[1] }} ${{ matrix.prop[1] }} apk failures" 
    strategy:  
      fail-fast: false 
      matrix: 
        image:  
          - [ 
            "alpine_3_22", #variant name
            "alpine:3.22", #image
            ] 
          - [ 
            "alpine_3_21", #variant name
            "alpine:3.21", #image
            ] 
          - [ 
            "alpine_3_20", #variant name - TODO Test
            "alpine:3.20", #image
            ] 
          - [ 
            "alpine_3_19", #variant name
            "alpine:3.19", #image
            ] 
          - [ 
            "alpine_3_18", #variant name
            "alpine:3.18", #image
            ] 
          - [ 
            "alpine_3_17", #variant name
            "alpine:3.17", #image
            ] 
          - [ 
            "alpine_3_16", #variant name
            "alpine:3.16", #image
            ] 
          - [ 
            "alpine_3_15", #variant name
            "alpine:3.15", #image
            ] 
          - [ 
            "alpine_3_14", #variant name
            "alpine:3.14", #image
            ] 
          - [ 
            "alpine_3_13", #variant name
            "alpine:3.13", #image
            ] 
        prop:  
          # - [ 
          #   "amd64",  # variant name 
          #   "amd64",  # platform spec 
          #   "",  # image prefix 
          # ] 
          # - [ 
          #   "arm64",  # variant name 
          #   "arm64",  # platform spec 
          #   "",  # image prefix 
          # ] 
          # hangs with QEMU https://github.com/nodejs/docker-node/issues/1973
          - [ 
            "arm32v7",  # variant name 
            "arm/v7",  # platform spec 
            "arm32v7/",  # image prefix 
          ] 
    runs-on: ubuntu-22.04 
    defaults: 
      run: 
        shell: bash 
 
    steps: 
 
      - name: Make folder for compatibility 
        run: | 
          mkdir compatibility 

      - name: Make folder for tzlc 
        run: | 
          mkdir tzlc 
  
      - name: Record failure for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        run: | 
          touch compatibility/npm.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail 
          touch compatibility/npx.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail 
 
      - name: Upload compatibility result 
        uses: actions/upload-artifact@v4 
        with: 
          name: icloudpd-compatibility-linux-npm-${{ matrix.image[0] }}-${{ matrix.prop[0] }}-apk-fail
          if-no-files-found: error 
          path: | 
            compatibility/* 

      - name: Record failure tzlc for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        run: | 
          touch tzlc/npm.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail 
          touch tzlc/npx.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail 
  
      - name: Upload tzlc result 
        uses: actions/upload-artifact@v4 
        with: 
          name: icloudpd-tzlc-linux-npm-${{ matrix.image[0] }}-${{ matrix.prop[0] }}-apk-fail
          if-no-files-found: error 
          path: | 
            tzlc/* 
    
  compatibility_macos_npm:
    name: "Compat NPM ${{ matrix.prop[0] }} ${{ matrix.prop[1] }}" 
    strategy:  
      fail-fast: false 
      matrix: 
        prop:  
          - [ 
            "macos-13", 
            "amd64", 
            ] 
          - [ 
            "macos-14", 
            "arm64", 
            ] 
    runs-on: ${{ matrix.prop[0] }} 
    needs: [ build_npm ] 
    defaults: 
      run: 
        shell: bash 
 
    steps: 
 
      - name: Setup Node for Registry Server
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Create Config
        run: |
          touch ${{ github.workspace }}/npm_config.yaml
          mkdir ${{ github.workspace }}/verdaccio
          echo "
          storage: ${{ github.workspace }}/verdaccio
          max_body_size: 1000mb
          log: { type: file, format: plain, level: http, path: ${{ github.workspace }}/verdaccio.log }
          packages:
            '**':
              access: \$anonymous
              publish: \$anonymous
          listen:
            - localhost:4873" > ${{ github.workspace }}/npm_config.yaml
          cat ${{ github.workspace }}/npm_config.yaml

      - name: Install Registry
        shell: bash 
        run: npm install -g verdaccio@5

      - name: Start Registry 
        shell: bash 
        run: verdaccio --config ${{ github.workspace }}/npm_config.yaml &

      - name: Make folder for compatibility 
        run: | 
          mkdir compatibility 

      - name: Make folder for tzlc 
        run: | 
          mkdir tzlc             

      - name: Download artifacts
        uses: actions/download-artifact@v4 
        with: 
          name: icloudpd-npm
          path: | 
            dist/npm

      - name: Setup Node for Test
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'http://localhost:4873'
        env:
          NODE_AUTH_TOKEN: "fake"
          
      - name: Publish NPM
        run: |
          npm publish dist/npm/@icloudpd/linux-arm --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/linux-arm64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/linux-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/win32-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/darwin-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/darwin-arm64 --access public --registry http://localhost:4873
          npm publish dist/npm/icloudpd --access public --registry http://localhost:4873
        env:
          NODE_AUTH_TOKEN: "fake"

      - name: Run test on ${{ matrix.prop[0] }} 
        id: run_test 
        continue-on-error: true 
        run: > 
          npm install -g --registry http://localhost:4873 icloudpd@${{inputs.icloudpd_version}} &&
          icloudpd --version  &&
          touch compatibility/npm.${{ matrix.prop[0] }}.${{ matrix.prop[1] }}.pass 
 
      - name: Record failure on ${{ matrix.prop[0] }} 
        if: ${{ steps.run_test.outcome == 'failure' }}  
        run: | 
          touch compatibility/npm.${{ matrix.prop[0] }}.${{ matrix.prop[1] }}.fail 
 
      - name: Upload compatibility result 
        uses: actions/upload-artifact@v4 
        with: 
          name: icloudpd-compatibility-macos-npm-${{ matrix.prop[0] }}-${{ matrix.prop[1] }}
          if-no-files-found: error 
          path: | 
            compatibility/* 

      - name: Run tzlc on ${{ matrix.prop[0] }} 
        id: run_tzlc 
        continue-on-error: true 
        run: > 
          npm install -g --registry http://localhost:4873 icloudpd@${{inputs.icloudpd_version}} &&
          TZ=America/Los_Angeles LC_ALL=ru_RU.UTF-8 icloudpd --use-os-locale --version  1>.result &&
          cat .result &&
          mv .result tzlc/npm.${{ matrix.prop[0] }}.${{ matrix.prop[1] }}.pass 
  
      - name: Record failure tzlc on ${{ matrix.prop[0] }} 
        if: ${{ steps.run_tzlc.outcome == 'failure' }}  
        run: | 
          touch tzlc/npm.${{ matrix.prop[0] }}.${{ matrix.prop[1] }}.fail 
  
      - name: Upload tzlc result 
        uses: actions/upload-artifact@v4 
        with: 
          name: icloudpd-tzlc-macos-npm-${{ matrix.prop[0] }}-${{ matrix.prop[1] }}
          if-no-files-found: error 
          path: | 
            tzlc/* 
    
  compatibility_macos_npx:
    name: "Compat NPX ${{ matrix.prop[0] }} ${{ matrix.prop[1] }}" 
    strategy:  
      fail-fast: false 
      matrix: 
        prop:  
          - [ 
            "macos-13", 
            "amd64", 
            ] 
          - [ 
            "macos-14", 
            "arm64", 
            ] 
    runs-on: ${{ matrix.prop[0] }} 
    needs: [ build_npm ] 
    defaults: 
      run: 
        shell: bash 
 
    steps: 
 
      - name: Setup Node for Registry Server
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Create Config
        run: |
          touch ${{ github.workspace }}/npm_config.yaml
          mkdir ${{ github.workspace }}/verdaccio
          echo "
          storage: ${{ github.workspace }}/verdaccio
          max_body_size: 1000mb
          log: { type: file, format: plain, level: http, path: ${{ github.workspace }}/verdaccio.log }
          packages:
            '**':
              access: \$anonymous
              publish: \$anonymous
          listen:
            - localhost:4873" > ${{ github.workspace }}/npm_config.yaml
          cat ${{ github.workspace }}/npm_config.yaml

      - name: Install Registry
        shell: bash 
        run: npm install -g verdaccio@5

      - name: Start Registry 
        shell: bash 
        run: verdaccio --config ${{ github.workspace }}/npm_config.yaml &

      - name: Make folder for compatibility 
        run: | 
          mkdir compatibility 

      - name: Make folder for tzlc 
        run: | 
          mkdir tzlc 

      - name: Download artifacts
        uses: actions/download-artifact@v4 
        with: 
          name: icloudpd-npm
          path: | 
            dist/npm

      - name: Setup Node for Test
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'http://localhost:4873'
        env:
          NODE_AUTH_TOKEN: "fake"
          
      - name: Publish NPM
        run: |
          npm publish dist/npm/@icloudpd/linux-arm --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/linux-arm64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/linux-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/win32-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/darwin-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/darwin-arm64 --access public --registry http://localhost:4873
          npm publish dist/npm/icloudpd --access public --registry http://localhost:4873
        env:
          NODE_AUTH_TOKEN: "fake"

      - name: Run test on ${{ matrix.prop[0] }} 
        id: run_test 
        continue-on-error: true 
        run: > 
          npx -y --registry http://localhost:4873 icloudpd@${{inputs.icloudpd_version}} --version  &&
          touch compatibility/npx.${{ matrix.prop[0] }}.${{ matrix.prop[1] }}.pass 
 
      - name: Record failure on ${{ matrix.prop[0] }} 
        if: ${{ steps.run_test.outcome == 'failure' }}  
        run: | 
          touch compatibility/npx.${{ matrix.prop[0] }}.${{ matrix.prop[1] }}.fail 
 
      - name: Upload compatibility result 
        uses: actions/upload-artifact@v4 
        with: 
          name: icloudpd-compatibility-macos-npx-${{ matrix.prop[0] }}-${{ matrix.prop[1] }}
          if-no-files-found: error 
          path: | 
            compatibility/* 

      - name: Run tzlc on ${{ matrix.prop[0] }} 
        id: run_tzlc 
        continue-on-error: true 
        run: > 
          TZ=America/Los_Angeles LC_ALL=ru_RU.UTF-8 npx -y --registry http://localhost:4873 icloudpd@${{inputs.icloudpd_version}} --use-os-locale --version 1>.result &&
          cat .result &&
          mv .result tzlc/npx.${{ matrix.prop[0] }}.${{ matrix.prop[1] }}.pass 
  
      - name: Record failure tzlc on ${{ matrix.prop[0] }} 
        if: ${{ steps.run_tzlc.outcome == 'failure' }}  
        run: | 
          touch tzlc/npx.${{ matrix.prop[0] }}.${{ matrix.prop[1] }}.fail 
  
      - name: Upload tzlc result 
        uses: actions/upload-artifact@v4 
        with: 
          name: icloudpd-tzlc-macos-npx-${{ matrix.prop[0] }}-${{ matrix.prop[1] }}
          if-no-files-found: error 
          path: | 
            tzlc/* 
    
  compatibility_windows_npm:
    name: "Compat NPM ${{ matrix.os }} amd64" 
    strategy:  
      fail-fast: false 
      matrix: 
        os: 
          - "windows-2019"
          - "windows-2022"
    runs-on: ${{ matrix.os }} 
    needs: [ build_npm ] 
    defaults: 
      run: 
        shell: bash 
 
    steps: 
 
      - name: Setup Node for Registry Server
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Create Config
        run: |
          touch npm_config.yaml
          mkdir verdaccio
          echo "
          storage: verdaccio
          log: { type: file, format: plain, level: debug, path: verdaccio.log }
          max_body_size: 1000mb
          packages:
            '**':
              access: \$anonymous
              publish: \$anonymous
          listen:
            - localhost:4873" > npm_config.yaml
          cat npm_config.yaml

      - name: Install Registry 
        shell: bash 
        run: npm install -g verdaccio@5

      - name: Start Registry 
        shell: bash 
        run: verdaccio --config npm_config.yaml &

      - name: Make folder for compatibility 
        run: | 
          mkdir compatibility 
 
      - name: Download artifacts
        uses: actions/download-artifact@v4 
        with: 
          name: icloudpd-npm
          path: | 
            dist/npm

      - name: Setup Node for Test
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'http://localhost:4873'
        env:
          NODE_AUTH_TOKEN: "fake"

      - name: Publish NPM
        continue-on-error: true 
        run: |
          npm publish dist/npm/@icloudpd/linux-arm --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/linux-arm64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/linux-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/win32-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/darwin-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/darwin-arm64 --access public --registry http://localhost:4873
          npm publish dist/npm/icloudpd --access public --registry http://localhost:4873
        env:
          NODE_AUTH_TOKEN: "fake"

      - name: Run test on ${{ matrix.os }} 
        id: run_test 
        continue-on-error: true 
        run: > 
          npm install -g --registry http://localhost:4873 icloudpd@${{inputs.icloudpd_version}} &&
          icloudpd --version &&
          touch compatibility/npm.${{ matrix.os }}.amd64.pass 
 
      - name: Record failure on ${{ matrix.os }} 
        if: ${{ steps.run_test.outcome == 'failure' }}  
        run: | 
          touch compatibility/npm.${{ matrix.os }}.amd64.fail 
 
      - name: Upload compatibility result 
        uses: actions/upload-artifact@v4 
        with: 
          name: icloudpd-compatibility-windows-npm-${{ matrix.os }}-amd64
          if-no-files-found: error 
          path: | 
            compatibility/* 

  compatibility_windows_npx:
    name: "Compat NPX ${{ matrix.os }} amd64" 
    strategy:  
      fail-fast: false 
      matrix: 
        os: 
          - "windows-2019"
          - "windows-2022"
    runs-on: ${{ matrix.os }} 
    needs: [ build_npm ] 
    defaults: 
      run: 
        shell: bash 
 
    steps: 
 
      - name: Setup Node for Registry Server
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Create Config
        run: |
          touch npm_config.yaml
          mkdir verdaccio
          echo "
          storage: verdaccio
          log: { type: file, format: plain, level: debug, path: verdaccio.log }
          max_body_size: 1000mb
          packages:
            '**':
              access: \$anonymous
              publish: \$anonymous
          listen:
            - localhost:4873" > npm_config.yaml
          cat npm_config.yaml

      - name: Install Registry 
        shell: bash 
        run: npm install -g verdaccio@5

      - name: Start Registry 
        shell: bash 
        run: verdaccio --config npm_config.yaml &

      - name: Make folder for compatibility 
        run: | 
          mkdir compatibility 
 
      - name: Download artifacts
        uses: actions/download-artifact@v4 
        with: 
          name: icloudpd-npm
          path: | 
            dist/npm

      - name: Setup Node for Test
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'http://localhost:4873'
        env:
          NODE_AUTH_TOKEN: "fake"

      - name: Publish NPM
        continue-on-error: true 
        run: |
          npm publish dist/npm/@icloudpd/linux-arm --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/linux-arm64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/linux-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/win32-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/darwin-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/darwin-arm64 --access public --registry http://localhost:4873
          npm publish dist/npm/icloudpd --access public --registry http://localhost:4873
        env:
          NODE_AUTH_TOKEN: "fake"

      - name: Run test on ${{ matrix.os }} 
        id: run_test 
        continue-on-error: true 
        run: > 
          npx -y --registry http://localhost:4873 icloudpd@${{inputs.icloudpd_version}} --version  &&
          touch compatibility/npx.${{ matrix.os }}.amd64.pass 
 
      - name: Record failure on ${{ matrix.os }} 
        if: ${{ steps.run_test.outcome == 'failure' }}  
        run: | 
          touch compatibility/npx.${{ matrix.os }}.amd64.fail 
 
      - name: Upload compatibility result 
        uses: actions/upload-artifact@v4 
        with: 
          name: icloudpd-compatibility-windows-npx-${{ matrix.os }}-amd64
          if-no-files-found: error 
          path: | 
            compatibility/* 

  compatibility_report:
    name: "Build Compatibility Report"

    runs-on: ubuntu-22.04
    needs: 
      - compatibility_macos_pip
      - compatibility_windows_pip
      - compatibility_linux_pip_apt
      - compatibility_linux_pip_apk
      - compatibility_linux_bin_apt
      - compatibility_linux_bin_apk
      - compatibility_linux_bin_musl_apt
      - compatibility_linux_bin_musl_apk
      - compatibility_macos_bin
      - compatibility_windows_bin
      - compatibility_docker
      - compatibility_linux_npm_apt
      - compatibility_linux_npx_apt
      - compatibility_linux_npm_apk
      - compatibility_linux_npx_apk
      - compatibility_linux_npm_apk_fail
      - compatibility_macos_npm
      - compatibility_macos_npx
      - compatibility_windows_npm
      - compatibility_windows_npx
      - get_expected_version_linux_apt
      - get_expected_version_linux_apk
      - get_expected_version_macos
      - get_version_thumbprint
    defaults:
      run:
        shell: bash

    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
    
      - name: Make folder for artifacts
        run: |
          mkdir dist

      - name: Download Compatibility Results
        uses: actions/download-artifact@v4
        with:
          pattern: icloudpd-compatibility-*
          merge-multiple: true
          path: |
            compatibility

      - name: Download tzlc Results
        uses: actions/download-artifact@v4
        with:
          pattern: icloudpd-tzlc-*
          merge-multiple: true
          path: |
            tzlc

      - name: Download Version
        uses: actions/download-artifact@v4
        with:
          pattern: icloudpd-version-thumbprint
          merge-multiple: true
          path: |
            dist

      - name: Compile Compatibility Report
        run: |
          echo "save report..."
          scripts/compile_compatibility.py dist/icloudpd-version-thumbprint.txt compatibility | tee dist/compatibility-${{inputs.icloudpd_version}}.md

      - name: Upload compatibility report
        uses: actions/upload-artifact@v4
        with:
          name: icloudpd-compatibility
          if-no-files-found: error
          path: |
            dist/compatibility-${{inputs.icloudpd_version}}.md

      - name: Compile tzlc Report
        run: |
          echo "save report..."
          scripts/compile_tzlc.py dist/icloudpd-version-thumbprint.txt tzlc "${{needs.get_expected_version_linux_apt.outputs.expected_version}}" "${{needs.get_expected_version_linux_apk.outputs.expected_version}}" "${{needs.get_expected_version_macos.outputs.expected_version}}" | tee dist/tzlc-${{inputs.icloudpd_version}}.md

      - name: Upload tzlc report
        uses: actions/upload-artifact@v4
        with:
          name: icloudpd-tzlc
          if-no-files-found: error
          path: |
            dist/tzlc-${{inputs.icloudpd_version}}.md
    